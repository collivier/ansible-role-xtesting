---
- name: Installing kind
  become: true
  uri:
    url: https://kind.sigs.k8s.io/dl/v0.11.1/kind-linux-amd64
    dest: /usr/local/bin/kind
    mode: '0755'
    status_code:
      - 200
      - 304
  when:
    - kubernetes_deploy
- name: Checking if the cluster exists
  shell: kind get clusters |grep xtesting |wc -l
  register: cluster_exist
  when:
    - kubernetes_deploy
- name: Deleting the previous cluster
  shell: kind delete cluster --name xtesting
  register: cluster_exit
  when:
    - kubernetes_deploy
    - kubernetes_recreate
    - cluster_exist.stdout_lines.0 | int > 0
- name: Creating {{ tmp_dir }}/kind_xtesting.yaml
  copy:
    src: kind.yaml
    dest: '{{ tmp_dir }}/kind_xtesting.yaml'
    mode: '0644'
  when:
    - kubernetes_deploy
- name: Creating the cluster
  shell: |
    kind create cluster --name xtesting \
      --config {{ tmp_dir }}/kind_xtesting.yaml
  register: cluster_exit
  when:
    - kubernetes_deploy
    - kubernetes_recreate or (cluster_exist.stdout_lines.0 | int < 1)
- name: Downloading helm
  uri:
    url: https://get.helm.sh/helm-v3.3.1-linux-amd64.tar.gz
    dest: '{{ tmp_dir }}/helm-v3.3.1-linux-amd64.tar.gz'
    mode: '0644'
    status_code:
      - 200
      - 304
  when:
    - use_kubernetes
- name: Installing helm
  become: true
  unarchive:
    remote_src: true
    src: '{{ tmp_dir }}/helm-v3.3.1-linux-amd64.tar.gz'
    dest: /usr/local/bin
    exclude:
      - linux-amd64/README.md
      - linux-amd64/LICENSE
    extra_opts:
      - --transform
      - s/^linux-amd64//
    mode: '0755'
  when:
    - use_kubernetes
- name: Getting latest Kubernetes release
  uri:
    url: https://storage.googleapis.com/kubernetes-release/release/stable.txt
    return_content: true
  register: release
  when:
    - use_kubernetes
- name: Installing kubectl
  become: true
  uri:
    url: https://storage.googleapis.com/kubernetes-release/release/{{
      release.content }}/bin/linux/amd64/kubectl
    dest: /usr/local/bin/kubectl
    mode: '0755'
    status_code:
      - 200
      - 304
  when:
    - use_kubernetes
- name: Creating configmap
  kubernetes.core.k8s:
    name: xtesting
    api_version: v1
    kind: ConfigMap
    namespace: default
    state: present
  when:
    - use_kubernetes
    - not use_artifacts
- name: Updating configmap according to volumes
  shell:
    cmd: |
      kubectl create configmap xtesting --from-file={{ item.split(':').0 }} \
        --dry-run -o yaml | kubectl apply -f -
  with_items: '{{ docker_args.volumes }}'
  when:
    - use_kubernetes
    - not use_artifacts
