---
- name: Installing docker
  become: "{{ not lookup('env','VIRTUAL_ENV') }}"
  pip:
    name: docker
  register: my_result
  until: my_result is succeeded
  retries: 5
  delay: 10
- name: Installing jenkins-job-builder
  become: "{{ not lookup('env','VIRTUAL_ENV') }}"
  pip:
    name: jenkins-job-builder
  register: my_result
  until: my_result is succeeded
  retries: 5
  delay: 10
  when:
    - jenkins_load_jobs
- name: Installing influxdb
  become: "{{ not lookup('env','VIRTUAL_ENV') }}"
  pip:
    name: influxdb
  register: my_result
  until: my_result is succeeded
  retries: 5
  delay: 10
  when:
    - influxdb_deploy
- name: Installing jmespath
  become: "{{ not lookup('env','VIRTUAL_ENV') }}"
  pip:
    name: jmespath
  register: my_result
  until: my_result is succeeded
  retries: 5
  delay: 10
  when:
    - gitlab_deploy
- name: Installing psycopg2-binary
  become: "{{ not lookup('env','VIRTUAL_ENV') }}"
  pip:
    name: psycopg2-binary
  register: my_result
  until: my_result is succeeded
  retries: 5
  delay: 10
  when:
    - postgres_deploy
- name: Changing state of selinux
  selinux:
    policy: targeted
    state: permissive
  become: true
  when:
    - ansible_os_family == "RedHat"
- set_fact:
    s3_endpoint_url: 'http://{{ ipaddress }}:{{ minio_port }}'
  when:
    - publish_to_s3
    - minio_deploy
    - http_dst_url is not defined
- set_fact:
    http_dst_url: 'http://{{ external_ipaddress }}:{{ s3www_port }}'
  when:
    - publish_to_s3
    - minio_deploy
    - http_dst_url is not defined
- set_fact:
    s3_endpoint_url: 'http://{{ ipaddress }}:{{ radosgw_port }}'
  when:
    - publish_to_s3
    - radosgw_deploy
    - not minio_deploy
    - s3_endpoint_url is not defined
- set_fact:
    http_dst_url: 'http://{{ external_ipaddress }}:{{ radosgw_port }}/{{ bucket }}'
  when:
    - publish_to_s3
    - radosgw_deploy
    - not minio_deploy
    - s3_endpoint_url is not defined
- name: Starting Jenkins
  become: true
  docker_container:
    name: jenkins
    image: ollivier/xtesting-jenkins
    pull: '{{ docker_pull }}'
    recreate: '{{ docker_recreate }}'
    published_ports:
      - '{{ jenkins_port }}:8080'
      - '{{ jenkins_jnlp_port }}:50000'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - '{{ prefix }}/jenkins:/var/jenkins_home'
  when:
    - jenkins_deploy
- name: Waiting Jenkins
  pause:
    seconds: '{{ jenkins_wait }}'
  when:
    - docker_recreate
    - jenkins_deploy
- name: Creating jenkins_jobs.ini
  template:
    src: jenkins_jobs.ini.j2
    dest: '{{ tmp_dir }}/jenkins_jobs.ini'
  when:
    - jenkins_load_jobs
- name: Creating {{ project }}.yaml
  template:
    src: run.yaml.j2
    dest: '{{ tmp_dir }}/{{ project }}.yaml'
  when:
    - jenkins_create_jobs
- name: Loading Jenkins jobs
  command: |
    jenkins-jobs --conf \
      {{ tmp_dir }}/jenkins_jobs.ini update {{ tmp_dir }}/{{ project }}.yaml
  register: exit_code
  changed_when: exit_code.rc == 0
  when:
    - jenkins_load_jobs
- name: Creating {{ prefix }}/gitlab/config
  become: true
  file:
    path: '{{ prefix }}/gitlab/config'
    state: directory
  when:
    - gitlab_deploy
- name: Creating {{ prefix }}/gitlab/config/gitlab.rb
  become: true
  template:
    src: gitlab.rb.j2
    dest: '{{ prefix }}/gitlab/config/gitlab.rb'
  when:
    - gitlab_deploy
- name: Starting GitLab
  become: true
  docker_container:
    name: gitlab
    image: gitlab/gitlab-ce
    pull: '{{ docker_pull }}'
    recreate: '{{ docker_recreate }}'
    published_ports:
      - '{{ gitlab_port }}:{{ gitlab_port }}'
    volumes:
      - '{{ prefix }}/gitlab/config:/etc/gitlab'
      - '{{ prefix }}/gitlab/logs:/var/log/gitlab'
      - '{{ prefix }}/gitlab/data:/var/opt/gitlab'
  when:
    - gitlab_deploy
- name: Waiting GitLab
  pause:
    seconds: '{{ gitlab_wait }}'
  when:
    - docker_recreate
    - gitlab_deploy
- name: Starting GitLab Runner
  become: true
  docker_container:
    name: gitlab-runner
    image: ollivier/xtesting-gitlab-runner
    pull: '{{ docker_pull }}'
    recreate: '{{ docker_recreate }}'
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
      - '{{ prefix }}/gitlab-runner:/etc/gitlab-runner'
  when:
    - gitlab_deploy
- name: Adding GitLab Runner to inventory
  add_host:
    name: gitlab-runner
    ansible_connection: docker
  changed_when: false
  when:
    - gitlab_deploy
- name: Regitering GitLab Runner
  delegate_to: gitlab-runner
  raw: gitlab-runner register
    --non-interactive
    --url {{ gitlab_url }}
    --registration-token token
    --executor shell
    --description xtesting
  when:
    - gitlab_deploy
- name: Getting GitLab access token
  uri:
    url: '{{ gitlab_url }}/oauth/token'
    method: POST
    body: "grant_type=password&username=root&password=password"
    status_code:
      - 200
  register: oauth
  when:
    - gitlab_deploy
- name: Checking if GitLab user is already created
  uri:
    url: '{{ gitlab_url }}/api/v4/users?username=xtesting&access_token={{
      oauth.json.access_token }}'
    status_code:
      - 200
  register: http_response
  when:
    - gitlab_deploy
- name: Setting user id
  set_fact:
    user_id: '{{ http_response.json.0.id }}'
  when:
    - gitlab_deploy
    - http_response.json|length > 0
- name: Creating GitLab user
  uri:
    url: '{{ gitlab_url }}/api/v4/users?access_token={{
      oauth.json.access_token }}'
    method: POST
    body: "email={{ gitlab_user_mail }}&username=xtesting&name=xtesting&\
      password=xtesting&skip_confirmation=true"
    status_code:
      - 201
  register: http_response
  when:
    - gitlab_deploy
    - http_response.json|length == 0
- name: Setting user id
  set_fact:
    user_id: '{{ http_response.json.id }}'
  when:
    - gitlab_deploy
    - user_id is not defined
- name: Checking if GitLab project is already created
  uri:
    url: '{{ gitlab_url }}/api/v4/users/{{ user_id }}/projects?access_token={{
      oauth.json.access_token }}'
    status_code:
      - 200
  register: http_response
  when:
    - gitlab_deploy
- name: Setting project id
  set_fact:
    project_id: "{{ http_response | json_query(query) | first }}"
  vars:
    query: "json[?name=='{{ project }}'].id"
  when:
    - gitlab_deploy
    - http_response.json|length > 0
- name: Creating GitLab project
  uri:
    url: '{{ gitlab_url }}/api/v4/projects/user/{{ user_id }}?access_token={{
      oauth.json.access_token }}'
    method: POST
    body:
      "user_id={{ user_id }}&name={{ project }}&initialize_with_readme=true"
    status_code:
      - 201
  when:
    - gitlab_deploy
    - project_id is not defined
- name: Starting Minio
  become: true
  docker_container:
    name: minio
    image: minio/minio
    pull: '{{ docker_pull }}'
    recreate: '{{ docker_recreate }}'
    command: server /data
    env:
      MINIO_ACCESS_KEY: '{{ aws_access_key_id }}'
      MINIO_SECRET_KEY: '{{ aws_secret_access_key }}'
    published_ports:
      - '{{ minio_port }}:9000'
    volumes:
      - '{{ prefix }}/minio:/data'
  when:
    - minio_deploy
- name: Starting S3www
  become: true
  docker_container:
    name: s3www
    image: ollivier/xtesting-s3www
    pull: '{{ docker_pull }}'
    recreate: '{{ docker_recreate }}'
    published_ports:
      - '{{ s3www_port }}:8080'
    env:
      ENDPOINT: 'http://{{ ipaddress }}:{{ minio_port }}'
      ACCESSKEY: '{{ aws_access_key_id }}'
      SECRETKEY: '{{ aws_secret_access_key }}'
      BUCKET: '{{ bucket }}'
  when:
    - minio_deploy
- name: Starting RadosGW
  become: true
  docker_container:
    name: radosgw
    image: ceph/daemon
    pull: '{{ docker_pull }}'
    # demo doesn't support restart
    # https://github.com/ceph/ceph-container/issues/1475
    recreate: false
    command: demo
    published_ports:
      - '{{ radosgw_port }}:{{ radosgw_port }}'
      - '{{ nano_port }}:5000'
    env:
      NETWORK_AUTO_DETECT: '4'
      CEPH_DEMO_UID: xtesting
      CEPH_DEMO_ACCESS_KEY: '{{ aws_access_key_id }}'
      CEPH_DEMO_SECRET_KEY: '{{ aws_secret_access_key }}'
      CEPH_DEMO_BUCKET: '{{ bucket }}'
      RGW_FRONTEND_PORT: '{{ radosgw_port |string }}'
  when:
    - radosgw_deploy
- name: Waiting RadosGW
  pause:
    seconds: '{{ radosgw_wait }}'
  when:
    - radosgw_deploy
- name: Adding RagosGW to inventory
  add_host:
    name: radosgw
    ansible_connection: docker
  changed_when: false
  when:
    - radosgw_deploy
- name: Creating cors.xml in radosgw
  delegate_to: radosgw
  copy:
    src: cors.xml
    dest: cors.xml
  when:
    - radosgw_deploy
- name: Creating policy.json in radosgw
  delegate_to: radosgw
  copy:
    src: policy.json
    dest: policy.json
  when:
    - radosgw_deploy
- name: Applying cors.xml in radosgw
  delegate_to: radosgw
  raw: s3cmd setcors cors.xml s3://{{ bucket }}
  when:
    - radosgw_deploy
- name: Applying policy.json in radosgw
  delegate_to: radosgw
  raw: s3cmd setpolicy policy.json s3://{{ bucket }}
  when:
    - radosgw_deploy
- name: Starting Docker Registry
  become: true
  docker_container:
    name: registry
    image: registry:2
    pull: '{{ docker_pull }}'
    recreate: '{{ docker_recreate }}'
    published_ports:
      - '{{ registry_port }}:5000'
    volumes:
      - '{{ prefix }}/registry:/var/lib/registry'
  when:
    - registry_deploy
- name: Starting MongoDB
  become: true
  docker_container:
    name: mongo
    image: mongo
    pull: '{{ docker_pull }}'
    recreate: '{{ docker_recreate }}'
    published_ports:
      - '{{ mongo_port }}:27017'
    volumes:
      - '{{ prefix }}/mongodb:/data/db'
  when:
    - push_to_db or push_to_db_env_vars
    - mongo_deploy
- name: Starting TestAPI
  become: true
  docker_container:
    name: testapi
    image: opnfv/testapi
    pull: '{{ docker_pull }}'
    recreate: '{{ docker_recreate }}'
    published_ports:
      - '{{ testapi_port }}:8000'
    env:
      base_url: '{{ testapi_base_url }}'
      mongodb_url: '{{ mongo_url }}'
      auth: 'false'
  when:
    - testapi_deploy
- name: Waiting TestAPI
  pause:
    seconds: '{{ testapi_wait }}'
  when:
    - docker_recreate
    - testapi_deploy
- name: Checking if pod is already registered
  uri:
    url: '{{ testapi_url }}/pods/{{ project }}'
    status_code:
      - 200
      - 404
  register: http_response
  when:
    - testapi_deploy or testapi_configure
- name: Registering the pod
  uri:
    url: '{{ testapi_url }}/pods'
    method: POST
    body: {"name":"{{ project }}"}
    status_code: 200
    body_format: json
  when:
    - testapi_deploy or testapi_configure
    - http_response.status != 200
- name: Checking if project is already registered
  uri:
    url: '{{ testapi_url }}/projects/{{ db_project }}'
    status_code:
      - 200
      - 404
  register: http_response
  when:
    - testapi_deploy or testapi_configure
- name: Registering the project
  uri:
    url: '{{ testapi_url }}/projects'
    method: POST
    body: {"name":"{{ db_project }}"}
    status_code: 200
    body_format: json
  when:
    - testapi_deploy or testapi_configure
    - http_response.status != 200
- name: Checking if testcase is already registered
  uri:
    url: '{{ testapi_url }}/projects/{{ db_project }}/cases/{{ item.1 }}'
    status_code:
      - 200
      - 404
  with_subelements:
    - '{{ suites }}'
    - 'tests'
  register: http_response
  when:
    - testapi_deploy or testapi_configure
- name: Registering the testcases
  uri:
    url: '{{ testapi_url }}/projects/{{ db_project }}/cases'
    method: POST
    body: {"name":"{{ item.item.1 }}"}
    status_code: 200
    body_format: json
  with_items:
    - '{{ http_response.results }}'
  loop_control:
    label: "{{ item.item.1 }}"
  when:
    - testapi_deploy or testapi_configure
    - item.status != 200
- name: Starting PostgreSQL
  become: true
  docker_container:
    name: postgres
    image: postgres:alpine
    pull: '{{ docker_pull }}'
    recreate: '{{ docker_recreate }}'
    published_ports:
      - '{{ postgres_port }}:5432'
    volumes:
      - '{{ prefix }}/postgres:/var/lib/postgresql/data'
    env:
      POSTGRES_USER: '{{ postgres_username }}'
      POSTGRES_PASSWORD: '{{ postgres_password }}'
      POSTGRES_DB: '{{ postgres_database }}'
  when:
    - postgres_deploy
- name: Starting Cachet
  become: true
  docker_container:
    name: cachet
    image: cachethq/docker:latest
    pull: '{{ docker_pull }}'
    recreate: '{{ docker_recreate }}'
    env:
      APP_KEY: '{{ cachet_appkey }}'
      DB_DRIVER: pgsql
      DB_HOST: '{{ postgres_host }}'
      DB_PORT: '{{ postgres_port |string }}'
      DB_DATABASE: '{{ postgres_database }}'
      DB_USERNAME: '{{ postgres_username }}'
      DB_PASSWORD: '{{ postgres_password }}'
    published_ports:
      - '{{ cachet_port }}:8000'
  when:
    - cachet_deploy
- name: Waiting Cachet
  pause:
    seconds: '{{ cachet_wait }}'
  when:
    - cachet_deploy
- name: Checking if settings exist
  postgresql_query:
    db: '{{ postgres_database }}'
    login_host: '{{ postgres_host }}'
    login_port: '{{ postgres_port }}'
    login_user: '{{ postgres_username }}'
    login_password: '{{ postgres_database }}'
    query: SELECT * FROM settings WHERE name = '{{ item.name }}'
  with_items:
    - '{{ cachet_settings }}'
  register: postgres_response
  when:
    - cachet_deploy
- name: Inserting settings
  postgresql_query:
    db: '{{ postgres_database }}'
    login_host: '{{ postgres_host }}'
    login_port: '{{ postgres_port }}'
    login_user: '{{ postgres_username }}'
    login_password: '{{ postgres_database }}'
    query: >
      INSERT INTO settings VALUES (nextval('settings_id_seq'),
      '{{ item.item.name }}', '{{ item.item.value }}', 'now()', 'now()')
  loop_control:
    label: "{{ item.item }}"
  with_items:
    - '{{ postgres_response.results }}'
  when:
    - cachet_deploy
    - item.rowcount == 0
- name: Checking if user exist
  postgresql_query:
    db: '{{ postgres_database }}'
    login_host: '{{ postgres_host }}'
    login_port: '{{ postgres_port }}'
    login_user: '{{ postgres_username }}'
    login_password: '{{ postgres_database }}'
    query: SELECT * FROM users WHERE username = '{{ cachet_user }}'
  register: postgres_response
  when:
    - cachet_deploy
- name: Inserting user
  postgresql_query:
    db: '{{ postgres_database }}'
    login_host: '{{ postgres_host }}'
    login_port: '{{ postgres_port }}'
    login_user: '{{ postgres_username }}'
    login_password: '{{ postgres_database }}'
    query: >
      INSERT INTO users VALUES (nextval('users_id_seq'), '{{ cachet_user }}',
      '{{ cachet_password }}',
      'NULL', '{{ cachet_user_mail }}', '{{ cachet_api_key }}', true, 1,
      'now()', 'now()', NULL, true)
  when:
    - cachet_deploy
    - postgres_response.rowcount == 0
- name: Checking if component_group exists
  postgresql_query:
    db: '{{ postgres_database }}'
    login_host: '{{ postgres_host }}'
    login_port: '{{ postgres_port }}'
    login_user: '{{ postgres_username }}'
    login_password: '{{ postgres_database }}'
    query: SELECT * FROM component_groups WHERE name = '{{ project }}'
  register: postgres_response
  when:
    - cachet_deploy
- name: Creating component_goup
  postgresql_query:
    db: '{{ postgres_database }}'
    login_host: '{{ postgres_host }}'
    login_port: '{{ postgres_port }}'
    login_user: '{{ postgres_username }}'
    login_password: '{{ postgres_database }}'
    query: >
      INSERT INTO component_groups VALUES (nextval('component_groups_id_seq'),
      '{{ project }}', now(), now(), 0, 0, 1)
  when:
    - cachet_deploy
    - postgres_response.rowcount == 0
- name: Getting component_group id
  postgresql_query:
    db: '{{ postgres_database }}'
    login_host: '{{ postgres_host }}'
    login_port: '{{ postgres_port }}'
    login_user: '{{ postgres_username }}'
    login_password: '{{ postgres_database }}'
    query: SELECT * FROM component_groups WHERE name = '{{ project }}'
  register: postgres_response
  when:
    - cachet_deploy
- name: Checking if components exist
  postgresql_query:
    db: '{{ postgres_database }}'
    login_host: '{{ postgres_host }}'
    login_port: '{{ postgres_port }}'
    login_user: '{{ postgres_username }}'
    login_password: '{{ postgres_database }}'
    query: SELECT * FROM components WHERE name = '{{ item.1 }}'
  with_subelements:
    - '{{ suites }}'
    - 'tests'
  register: components_response
  when:
    - cachet_deploy
- name: Registering the components
  postgresql_query:
    db: '{{ postgres_database }}'
    login_host: '{{ postgres_host }}'
    login_port: '{{ postgres_port }}'
    login_user: '{{ postgres_username }}'
    login_password: '{{ postgres_database }}'
    query: >
      INSERT INTO components VALUES (nextval('components_id_seq'),
      '{{ item.item.1 }}', '', '', 1, 0,
      '{{ postgres_response.query_result.0.id }}', now(), now(), null, true,
      null)
  loop_control:
    label: "{{ item.item }}"
  with_items:
    - '{{ components_response.results }}'
  when:
    - cachet_deploy
    - item.rowcount == 0
- name: Getting all components
  postgresql_query:
    db: '{{ postgres_database }}'
    login_host: '{{ postgres_host }}'
    login_port: '{{ postgres_port }}'
    login_user: '{{ postgres_username }}'
    login_password: '{{ postgres_database }}'
    query: SELECT * FROM components
  register: postgres_response
  when:
    - cachet_deploy
- name: Creating cachet-url-monitor.yml
  template:
    src: cachet-url-monitor.yml.j2
    dest: '{{ tmp_dir }}/cachet-url-monitor.yml'
  when:
    - cachet_deploy
- name: Starting cachet-url-monitor
  become: true
  docker_container:
    name: cachet-url-monitor
    image: mtakaki/cachet-url-monitor
    pull: '{{ docker_pull }}'
    recreate: '{{ docker_recreate }}'
    volumes:
      - '{{ tmp_dir }}/cachet-url-monitor.yml:/usr/src/app/config/config.yml'
  when:
    - cachet_deploy
- name: Starting InfluxDB
  become: true
  docker_container:
    name: influxdb
    image: influxdb
    pull: '{{ docker_pull }}'
    recreate: '{{ docker_recreate }}'
    published_ports:
      - '{{ influxdb_port }}:8086'
    volumes:
      - '{{ prefix }}/influxdb:/var/lib/influxdb'
  when:
    - influxdb_deploy
- name: Waiting InfluxDB
  pause:
    seconds: '{{ influxdb_wait }}'
  when:
    - docker_recreate
    - influxdb_deploy
- name: Creating InfluxDB database
  influxdb_database:
    hostname: '{{ ipaddress }}'
    port: '{{ influxdb_port }}'
    database_name: '{{ project }}'
  when:
    - influxdb_deploy
- name: Creating {{ prefix }}/grafana
  become: true
  file:
    path: '{{ prefix }}/grafana'
    state: directory
    mode: '0777'
  when:
    - grafana_deploy
- name: Starting Grafana
  become: true
  docker_container:
    name: grafana
    image: grafana/grafana
    pull: '{{ docker_pull }}'
    recreate: '{{ docker_recreate }}'
    published_ports:
      - '{{ grafana_port }}:3000'
    volumes:
      - '{{ prefix }}/grafana:/var/lib/grafana'
  when:
    - grafana_deploy
- name: Waiting Grafana
  pause:
    seconds: '{{ grafana_wait }}'
  when:
    - docker_recreate
    - grafana_deploy
- name: Adding InfluxDB data source in Grafana
  grafana_datasource:
    name: 'influxdb'
    grafana_url: 'http://{{ ipaddress }}:{{ grafana_port }}'
    ds_type: 'influxdb'
    url: '{{ influxdb_url }}'
    database: '{{ project }}'
  when:
    - grafana_deploy
- name: Cloning {{ project }} repository
  git:
    repo: '{{ gitlab_clone_url }}'
    dest: '{{ tmp_dir }}/{{ project }}'
    version: '{{ gitlab_version }}'
    force: true
  when:
    - gitlab_deploy
- name: Creating .gitlab-ci.yml
  template:
    src: gitlab-ci.yml.j2
    dest: '{{ tmp_dir }}/{{ project }}/.gitlab-ci.yml'
  when:
    - gitlab_deploy
- name: Configuring user.email in .gitconfig
  git_config:
    scope: local
    repo: '{{ tmp_dir }}/{{ project }}'
    name: user.email
    value: "{{ gitlab_user_mail }}"
  when:
    - gitlab_deploy
- name: Configuring user.email in .gitconfig
  git_config:
    scope: local
    repo: '{{ tmp_dir }}/{{ project }}'
    name: user.name
    value: xtesting
  when:
    - gitlab_deploy
- name: Pushing .gitlab-ci.yml
  shell: |
    git add .gitlab-ci.yml
    git commit -m "{{ gitlab_commit_msg }}" && git push || true
  args:
    chdir: '{{ tmp_dir }}/{{ project }}'
  when:
    - gitlab_deploy
