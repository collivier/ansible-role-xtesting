---
- name: Installing jmespath
  become: "{{ not lookup('env','VIRTUAL_ENV') }}"
  pip:
    name: jmespath
  register: my_result
  until: my_result is succeeded
  retries: 5
  delay: 10
  environment:
    use_proxy: "{{ use_proxy }}"
    http_proxy: "{{ http_proxy if use_proxy else '' }}"
    https_proxy: "{{ https_proxy if use_proxy else '' }}"
  when:
    - gitlab_deploy or gitlab_configure

- name: Creating {{ prefix }}/gitlab/config
  become: true
  file:
    path: '{{ prefix }}/gitlab/config'
    state: directory
    mode: '0755'
  when:
    - gitlab_deploy
- name: Creating {{ prefix }}/gitlab/config/gitlab.rb
  become: true
  template:
    src: gitlab.rb.j2
    dest: '{{ prefix }}/gitlab/config/gitlab.rb'
    mode: '0644'
  when:
    - gitlab_deploy
- name: Starting GitLab
  become: true
  docker_container:
    name: gitlab
    image: gitlab/gitlab-ce
    pull: '{{ docker_pull }}'
    recreate: '{{ docker_recreate }}'
    restart_policy: '{{ docker_restart_policy }}'
    published_ports:
      - '{{ gitlab_port }}:{{ gitlab_port }}'
    volumes:
      - '{{ prefix }}/gitlab/config:/etc/gitlab'
      - '{{ prefix }}/gitlab/logs:/var/log/gitlab'
      - '{{ prefix }}/gitlab/data:/var/opt/gitlab'
  register: docker_response
  when:
    - gitlab_deploy
- name: Waiting GitLab
  pause:
    seconds: '{{ gitlab_wait }}'
  when:
    - docker_response.changed
- name: Setting concurrent in gitlab-runner/config.toml
  become: true
  lineinfile:
    path: '{{ prefix }}/gitlab-runner/config.toml'
    line: concurrent = {{ gitlab_sharedrunner_concurrent }}
    create: true
    mode: '0644'
  when:
    - gitlab_sharedrunner_deploy
- name: Starting shared GitLab runner
  become: true
  docker_container:
    name: gitlab-runner
    image: gitlab/gitlab-runner:latest
    pull: '{{ docker_pull }}'
    recreate: '{{ docker_recreate }}'
    restart_policy: '{{ docker_restart_policy }}'
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
      - '{{ prefix }}/gitlab-runner:/etc/gitlab-runner'
  when:
    - gitlab_sharedrunner_deploy
- name: Adding shared GitLab runner to inventory
  add_host:
    name: gitlab-runner
    ansible_connection: docker
  changed_when: false
  when:
    - gitlab_sharedrunner_deploy
- name: Check GitLab Runner
  delegate_to: gitlab-runner
  raw: gitlab-runner list 2>&1 |grep shared |wc -l
  register: runner
  when:
    - gitlab_sharedrunner_deploy
- name: Registering shared GitLab runner
  delegate_to: gitlab-runner
  raw: REGISTER_LOCKED=false gitlab-runner register
    --name shared
    --non-interactive
    --url {{ gitlab_url }}
    --registration-token token
    --executor docker
    --docker-image {{ gitlab_sharedrunner_image }}
    --docker-volumes /var/run/docker.sock:/var/run/docker.sock
  when:
    - gitlab_sharedrunner_deploy
    - runner.stdout_lines.0 | int < 1
- name: Setting concurrent in gitlab-{{ project }}-runner/config.toml
  become: true
  lineinfile:
    path: '{{ prefix }}/gitlab-{{ project }}-runner/config.toml'
    line: concurrent = {{ gitlab_privaterunner_concurrent }}
    create: true
    mode: '0644'
  when:
    - gitlab_configure
    - gitlab_privaterunner_deploy
- name: Starting private GitLab runner
  become: true
  docker_container:
    name: gitlab-{{ project }}-runner
    image: gitlab/gitlab-runner:latest
    pull: '{{ docker_pull }}'
    recreate: '{{ docker_recreate }}'
    restart_policy: '{{ docker_restart_policy }}'
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
      - '{{ prefix }}/gitlab-{{ project }}-runner:/etc/gitlab-runner'
  when:
    - gitlab_configure
    - gitlab_privaterunner_deploy
- name: Adding private GitLab runner to inventory
  add_host:
    name: gitlab-{{ project }}-runner
    ansible_connection: docker
  changed_when: false
  when:
    - gitlab_configure
    - gitlab_privaterunner_deploy
- name: Check private GitLab Runner
  delegate_to: gitlab-{{ project }}-runner
  raw: gitlab-runner list 2>&1 |grep {{ project }} |wc -l
  register: runner
  when:
    - gitlab_configure
    - gitlab_privaterunner_deploy
- name: Registering private GitLab runner
  delegate_to: gitlab-{{ project }}-runner
  raw: gitlab-runner register
    --name {{ project }}
    --non-interactive
    --url {{ gitlab_url }}
    --registration-token token
    --executor docker
    --tag-list {{ project }}-daily
    --docker-image {{ gitlab_privaterunner_image }}
    --docker-network-mode {{ gitlab_privaterunner_network_mode }}
    --docker-volumes /var/run/docker.sock:/var/run/docker.sock
    {% if not gitlab_use_artifacts %}
    {% for volume in docker_args.volumes %} --docker-volumes {{
      volume }}{% endfor %}
    {% endif %}
  when:
    - gitlab_configure
    - gitlab_privaterunner_deploy
    - runner.stdout_lines.0 | int < 1
- name: Getting GitLab access token
  uri:
    url: '{{ gitlab_url }}/oauth/token'
    method: POST
    body: "grant_type=password&username=root&password=password"
    status_code:
      - 200
  register: oauth
  when:
    - gitlab_configure
- name: Checking if GitLab user is already created
  uri:
    url: '{{ gitlab_url }}/api/v4/users?username=xtesting&access_token={{
      oauth.json.access_token }}'
    status_code:
      - 200
  register: http_response
  when:
    - gitlab_configure
- name: Setting user id
  set_fact:
    user_id: '{{ http_response.json.0.id }}'
  when:
    - gitlab_configure
    - http_response.json|length > 0
- name: Creating GitLab user
  uri:
    url: '{{ gitlab_url }}/api/v4/users?access_token={{
      oauth.json.access_token }}'
    method: POST
    body: "email={{ gitlab_user_mail }}&username=xtesting&name=xtesting&\
      password=xtesting&skip_confirmation=true"
    status_code:
      - 201
  register: http_response
  when:
    - gitlab_configure
    - http_response.json|length == 0
- name: Setting user id
  set_fact:
    user_id: '{{ http_response.json.id }}'
  when:
    - gitlab_configure
    - user_id is not defined
- name: Getting GitLab access token
  uri:
    url: '{{ gitlab_url }}/oauth/token'
    method: POST
    body: "grant_type=password&username=xtesting&password=xtesting"
    status_code:
      - 200
  register: oauth
  when:
    - gitlab_configure
- name: Listing all GitLab projects
  uri:
    url: '{{ gitlab_url }}/api/v4/users/{{ user_id }}/projects?access_token={{
      oauth.json.access_token }}&simple=true'
    status_code:
      - 200
  register: http_response
  when:
    - gitlab_configure
- name: Checking if project already exists
  set_fact:
    project_created: "{{ http_response | json_query(query) | length > 0 }}"
  vars:
    query: "json[?name=='{{ project }}']"
  when:
    - gitlab_configure
    - http_response.json|length > 0
- name: Creating GitLab project
  uri:
    url: '{{ gitlab_url }}/api/v4/projects?access_token={{
      oauth.json.access_token }}'
    method: POST
    body:
      "name={{ project }}&initialize_with_readme=true"
    status_code:
      - 201
  when:
    - gitlab_configure
    - project_created is not defined or not project_created
- name: Listing all GitLab projects
  uri:
    url: '{{ gitlab_url }}/api/v4/users/{{ user_id }}/projects?access_token={{
      oauth.json.access_token }}&simple=true'
    status_code:
      - 200
  register: http_response
  when:
    - gitlab_deploy or gitlab_configure
- name: Getting project id
  set_fact:
    project_id: "{{ http_response | json_query(query) }}"
  vars:
    query: "json[?name=='{{ project }}'].id"
  when:
    - gitlab_configure
- name: Getting all pipeline schedules
  uri:
    url: '{{ gitlab_url }}/api/v4/projects/{{
      project_id.0 }}/pipeline_schedules?access_token={{
      oauth.json.access_token }}'
    status_code:
      - 200
  register: http_response
  when:
    - gitlab_configure
- name: Getting pipeline id
  set_fact:
    pipeline_created: "{{ http_response | json_query(query) | length > 0 }}"
  vars:
    query: "json[?description=='{{ project }}-daily']"
  when:
    - gitlab_configure
- name: Creating the pipeline schedule
  uri:
    url: '{{ gitlab_url }}/api/v4/projects/{{
      project_id.0 }}/pipeline_schedules?access_token={{
      oauth.json.access_token }}'
    method: POST
    body_format: form-urlencoded
    body:
      - [description, '{{ project }}-daily']
      - [cron, "0 16 * * *"]
      - [ref, master]
    status_code:
      - 201
  when:
    - gitlab_configure
    - not pipeline_created
- name: Cloning {{ project }} repository
  git:
    repo: '{{ gitlab_clone_url }}'
    dest: '{{ tmp_dir }}/{{ project }}'
    version: '{{ gitlab_version }}'
    force: true
  when:
    - gitlab_configure
- name: Configuring user.email in .gitconfig
  git_config:
    scope: local
    repo: '{{ tmp_dir }}/{{ project }}'
    name: user.email
    value: "{{ gitlab_user_mail }}"
  when:
    - gitlab_configure
- name: Configuring user.email in .gitconfig
  git_config:
    scope: local
    repo: '{{ tmp_dir }}/{{ project }}'
    name: user.name
    value: xtesting
  when:
    - gitlab_configure
- name: Adding scripts/chained-ci-tools as git submodule
  shell: |
    git submodule add \
      https://gitlab.com/Orange-OpenSource/lfn/ci_cd/chained-ci-tools.git \
      scripts/chained-ci-tools
  args:
    chdir: '{{ tmp_dir }}/{{ project }}'
  when:
    - gitlab_create_jobs
    - gitlab_ci_mode == "overwrite"
    - gitlab_use_chainedci
- name: Creating {{ tmp_dir }}/{{ project }}/.gitlab-ci.yml
  template:
    src: gitlab-ci.yml.j2
    dest: '{{ tmp_dir }}/{{ project }}/.gitlab-ci.yml'
    mode: '0644'
  when:
    - gitlab_create_jobs
    - gitlab_ci_mode == "overwrite"
- name: Creating  {{ tmp_dir }}/{{ project }}/.gitlab-ci.yml
  copy:
    src: gitlab-ci.yml
    dest: '{{ tmp_dir }}/{{ project }}/.gitlab-ci.yml'
    force: false
    mode: '0644'
  when:
    - gitlab_create_jobs
    - gitlab_ci_mode != "overwrite"
- name: Creating {{ tmp_dir }}/gitlab-ci.steps.yml
  template:
    src: gitlab-ci.steps.yml.j2
    dest: '{{ tmp_dir }}/gitlab-ci.steps.yml'
    mode: '0644'
  when:
    - gitlab_create_jobs
    - gitlab_ci_mode != "overwrite"
- name: Creating .gitlab-ci.yml
  blockinfile:
    block: "{{ lookup('file', tmp_dir ~ '/gitlab-ci.steps.yml') }}"
    path: '{{ tmp_dir }}/{{ project }}/.gitlab-ci.yml'
    marker: "# {mark} XtestingCI steps"
    insertbefore: ".post"
  when:
    - gitlab_create_jobs
    - gitlab_ci_mode != "overwrite"
- name: Creating {{ tmp_dir }}/gitlab-ci.jobs.yml
  template:
    src: gitlab-ci.jobs.yml.j2
    dest: '{{ tmp_dir }}/gitlab-ci.jobs.yml'
    mode: '0644'
  when:
    - gitlab_create_jobs
    - gitlab_ci_mode != "overwrite"
- name: Creating .gitlab-ci.yml
  blockinfile:
    block: "{{ lookup('file', tmp_dir ~ '/gitlab-ci.jobs.yml') }}"
    path: '{{ tmp_dir }}/{{ project }}/.gitlab-ci.yml'
    marker: "# {mark} XtestingCI jobs"
  when:
    - gitlab_create_jobs
    - gitlab_ci_mode != "overwrite"
- name: Pushing .gitlab-ci.yml
  shell: |
    git add .gitlab-ci.yml
    git commit -m "{{ gitlab_commit_msg }}" && git push || true
  args:
    chdir: '{{ tmp_dir }}/{{ project }}'
  when:
    - gitlab_configure
    - gitlab_create_jobs
