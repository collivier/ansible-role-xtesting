---
- name: Starting Jenkins
  become: "{{ ansible_connection is defined }}"
  community.docker.docker_container:
    name: jenkins
    image: '{{ jenkins_docker_image }}:{{ jenkins_docker_tag }}'
    pull: '{{ docker_pull }}'
    recreate: '{{ docker_recreate }}'
    restart_policy: '{{ docker_restart_policy }}'
    published_ports:
      - '{{ jenkins_port }}:8080'
      - '{{ jenkins_jnlp_port }}:50000'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - '{{ prefix }}/jenkins:/var/jenkins_home'
    network_mode: '{{ jenkins_network_mode }}'
    container_default_behavior: no_defaults
  notify:
    - Waiting Jenkins
  when:
    - jenkins_deploy
    - jenkins_network_mode != 'host'
    - not use_kubernetes
- name: Starting Jenkins
  become: "{{ ansible_connection is defined }}"
  community.docker.docker_container:
    name: jenkins
    image: ollivier/xtesting-jenkins
    pull: '{{ docker_pull }}'
    recreate: '{{ docker_recreate }}'
    restart_policy: '{{ docker_restart_policy }}'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - '{{ prefix }}/jenkins:/var/jenkins_home'
    network_mode: '{{ jenkins_network_mode }}'
    container_default_behavior: no_defaults
  notify:
    - Waiting Jenkins
  when:
    - jenkins_deploy
    - jenkins_network_mode == 'host'
    - not use_kubernetes
- name: Adding Jenkins chart repository
  kubernetes.core.helm_repository:
    name: jenkins
    repo_url: https://charts.jenkins.io
  when:
    - jenkins_deploy
    - use_kubernetes
- name: Setting insecure registries
  set_fact:
    dind_args: ["--insecure-registry={{ ipaddress }}:{{ registry_port }}"]
  when:
    - jenkins_deploy
    - use_kubernetes
    - registry_deploy
- name: Installing Jenkins helm chart
  kubernetes.core.helm:
    name: jenkins
    chart_ref: jenkins/jenkins
    chart_version: 3.10.2
    release_namespace: default
    values:
      controller:
        image: '{{ jenkins_k8s_docker_image }}'
        tag: '{{ jenkins_k8s_docker_tag }}'
        adminUser: '{{ jenkins_user }}'
        adminPassword: '{{ jenkins_password }}'
        jenkinsUrl: '{{ jenkins_url }}'
        overwritePlugins: true
        installPlugins:
          - kubernetes
          - workflow-aggregator
          - git
          - configuration-as-code
          - build-blocker-plugin
          - git-client
          - gerrit-code-review
          - gerrit-trigger
          - gerrit-verify-status-reporter
          - jenkins-multijob-plugin
          - nodelabelparameter
          - random-string-parameter
          - copyartifact
        serviceType: NodePort
        nodePort: '{{ jenkins_port }}'
        agentListenerServiceType: NodePort
        agentListenerPort: '{{ jenkins_jnlp_port }}'
      agent:
        image: "ollivier/xtesting-jenkins-agent"
        tag: "latest"
        command: "jenkins-agent"
        envVars:
          - name: DOCKER_HOST
            value: tcp://127.0.0.1:2375
        yamlTemplate: |-
          apiVersion: v1
          kind: Pod
          spec:
            containers:
            - env:
              - name: "DOCKER_TLS_CERTDIR"
                value: ""
              image: "docker:dind"
              name: "dind"
              args: {{ dind_args |Â default([]) }}
              securityContext:
                privileged: true
              tty: false
              volumeMounts:
              - mountPath: "/home/jenkins"
                name: "workspace-volume"
                readOnly: false
              - mountPath: "/etc/xtesting"
                name: "config"
                readOnly: true
            volumes:
            - name: config
              configMap:
                name: xtesting
      yamlMergeStrategy: "override"
    wait: true
    wait_timeout: 600s
  when:
    - jenkins_deploy
    - use_kubernetes
- name: Flushing handlers
  meta: flush_handlers
- name: Starting Jenkins agent
  become: "{{ ansible_connection is defined }}"
  community.docker.docker_container:
    name: jenkins-agent
    image: '{{ jenkins_agent_docker_image }}'
    pull: '{{ docker_pull }}'
    recreate: '{{ docker_recreate }}'
    restart_policy: '{{ docker_restart_policy }}'
    env:
      JENKINS_URL: '{{ jenkins_url }}'
      JENKINS_AUTH: admin:admin
      JENKINS_SLAVE_NAME: '{{ jenkins_agent_name }}'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - '{{ prefix }}/jenkins/workspace:/var/jenkins_home/workspace'
    network_mode: '{{ jenkins_agent_network_mode }}'
    container_default_behavior: no_defaults
  when:
    - jenkins_agent_deploy
- name: Creating jenkins_jobs.ini
  template:
    src: jenkins_jobs.ini.j2
    dest: '{{ tmp_dir }}/jenkins_jobs.ini'
    mode: '0644'
  when:
    - jenkins_configure
- name: Creating {{ project }}.yaml
  template:
    src: run.yaml.j2
    dest: '{{ tmp_dir }}/{{ project }}.yaml'
    mode: '0644'
  when:
    - jenkins_create_jobs
- name: Loading Jenkins jobs
  command: |
    jenkins-jobs --conf \
      {{ tmp_dir }}/jenkins_jobs.ini update {{ tmp_dir }}/{{ project }}.yaml
  register: exit_code
  changed_when: exit_code.rc == 0
  when:
    - jenkins_configure
    - jenkins_create_jobs
