---
- name: Creating jenkins/casc_configs in {{ prefix }}
  become: true
  ansible.builtin.file:
    path: '{{ prefix }}/jenkins/casc_configs'
    state: directory
    mode: '0755'
  when:
    - jenkins_deploy
    - not use_kubernetes
- name: Creating casc_configs/jenkins.yaml in {{ prefix }}
  become: true
  ansible.builtin.template:
    src: jenkins.yaml.j2
    dest: '{{ prefix }}/jenkins/casc_configs/jenkins.yaml'
    mode: '0644'
    force: false
  when:
    - jenkins_deploy
    - not use_kubernetes
- name: Starting Jenkins
  become: "{{ ansible_connection is defined }}"
  community.docker.docker_container:
    name: jenkins
    image: '{{ jenkins_docker_image }}:{{ jenkins_docker_tag }}'
    image_comparison: '{{ docker_image_comparison }}'
    pull: '{{ docker_pull }}'
    recreate: '{{ docker_recreate }}'
    restart_policy: '{{ docker_restart_policy }}'
    published_ports:
      - '{{ jenkins_port }}:8080'
      - '{{ jenkins_jnlp_port }}:50000'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - '{{ prefix }}/jenkins:/var/jenkins_home'
    env:
      JENKINS_OPTS: '--prefix={{ jenkins_prefix }}'
    network_mode: '{{ jenkins_network_mode }}'
    container_default_behavior: no_defaults
  notify:
    - Waiting Jenkins
  when:
    - jenkins_deploy
    - jenkins_network_mode != 'host'
    - not use_kubernetes
    - not use_podman
- name: Starting Jenkins
  become: "{{ ansible_connection is defined }}"
  community.docker.docker_container:
    name: jenkins
    image: '{{ jenkins_docker_image }}:{{ jenkins_docker_tag }}'
    image_comparison: '{{ docker_image_comparison }}'
    pull: '{{ docker_pull }}'
    recreate: '{{ docker_recreate }}'
    restart_policy: '{{ docker_restart_policy }}'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - '{{ prefix }}/jenkins:/var/jenkins_home'
    env:
      JENKINS_OPTS: '--prefix={{ jenkins_prefix }}'
    network_mode: '{{ jenkins_network_mode }}'
    container_default_behavior: no_defaults
  notify:
    - Waiting Jenkins
  when:
    - jenkins_deploy
    - jenkins_network_mode == 'host'
    - not use_kubernetes
    - not use_podman
- name: Starting Jenkins
  become: "{{ ansible_connection is defined }}"
  containers.podman.podman_container:
    name: jenkins
    image: '{{ jenkins_docker_image }}:{{ jenkins_docker_tag }}'
    recreate: '{{ docker_recreate }}'
    restart_policy: '{{ docker_restart_policy }}'
    cgroups: '{{ podman_cgroups }}'
    privileged: true
    published_ports:
      - '{{ jenkins_port }}:8080'
      - '{{ jenkins_jnlp_port }}:50000'
    volumes:
      - '{{ prefix }}/jenkins:/var/jenkins_home'
  notify:
    - Waiting Jenkins
  when:
    - jenkins_deploy
    - use_podman
- name: Adding Jenkins chart repository
  kubernetes.core.helm_repository:
    name: jenkins
    repo_url: https://charts.jenkins.io
  when:
    - jenkins_deploy
    - use_kubernetes
- name: Setting insecure registries
  ansible.builtin.set_fact:
    dind_args: ["--insecure-registry={{ ipaddress }}:{{ registry_port }}"]
  when:
    - jenkins_deploy
    - use_kubernetes
    - registry_deploy
- name: Installing Jenkins helm chart
  kubernetes.core.helm:
    name: jenkins
    chart_ref: jenkins/jenkins
    chart_version: '{{ jenkins_chart_version }}'
    release_namespace: default
    update_repo_cache: '{{ helm_update_repo_cache }}'
    values:
      controller:
        image:
          repository: '{{ jenkins_k8s_image }}'
          tag: '{{ jenkins_k8s_tag }}'
        admin:
          username: '{{ jenkins_user }}'
          password: '{{ jenkins_password }}'
        jenkinsUrl: '{{ jenkins_url }}'
        overwritePlugins: true
        installPlugins:
          - kubernetes
          - workflow-aggregator
          - git
          - configuration-as-code
          - build-blocker-plugin
          - git-client
          - gerrit-code-review
          - gerrit-trigger
          - gerrit-verify-status-reporter
          - jenkins-multijob-plugin
          - nodelabelparameter
          - random-string-parameter
          - copyartifact
          - email-ext
          - build-timeout
        serviceType: NodePort
        nodePort: '{{ jenkins_port }}'
        agentListenerServiceType: NodePort
        agentListenerPort: '{{ jenkins_jnlp_port }}'
      agent:
        image:
          repository: '{{ jenkins_agent_docker_image }}'
          tag: '{{ jenkins_agent_docker_tag }}'
        command: "jenkins-agent"
        envVars:
          - name: DOCKER_HOST
            value: tcp://127.0.0.1:2375
        yamlTemplate: |-
          apiVersion: v1
          kind: Pod
          spec:
            containers:
            - env:
              - name: "DOCKER_TLS_CERTDIR"
                value: ""
              image: '{{ docker_image }}'
              name: "dind"
              readinessProbe:
                tcpSocket:
                  port: 2375
                initialDelaySeconds: 5
                periodSeconds: 10
              args: {{ dind_args | default([]) }}
              securityContext:
                privileged: true
              tty: false
              volumeMounts:
              - mountPath: "/home/jenkins"
                name: "workspace-volume"
                readOnly: false
              - mountPath: "/etc/xtesting"
                name: "config"
                readOnly: true
            volumes:
            - name: config
              configMap:
                name: xtesting
      yamlMergeStrategy: "override"
    wait: true
    wait_timeout: 600s
  when:
    - jenkins_deploy
    - use_kubernetes
- name: Flushing handlers
  ansible.builtin.meta: flush_handlers
- name: Creating {{ prefix }}/jenkins/workspace
  become: true
  file:
    path: '{{ prefix }}/jenkins/workspace'
    state: directory
  when:
    - jenkins_agent_deploy
- name: Starting Jenkins agent
  become: "{{ ansible_connection is defined }}"
  community.docker.docker_container:
    name: jenkins-agent
    image: '{{ jenkins_agent_auto_docker_image }}:{{ jenkins_agent_auto_docker_tag }}'
    image_comparison: '{{ docker_image_comparison }}'
    pull: '{{ docker_pull }}'
    recreate: '{{ docker_recreate }}'
    restart_policy: '{{ docker_restart_policy }}'
    privileged: true
    env:
      JENKINS_URL: '{{ jenkins_url }}'
      JENKINS_AUTH: '{{ jenkins_user }}:{{ jenkins_password }}'
      JENKINS_SLAVE_NAME: '{{ jenkins_agent_name }}'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - '{{ prefix }}/jenkins/workspace:/var/jenkins_home/workspace'
    network_mode: '{{ jenkins_agent_network_mode }}'
    container_default_behavior: no_defaults
  when:
    - jenkins_agent_deploy
    - not use_podman
- name: Starting Jenkins agent
  become: "{{ ansible_connection is defined }}"
  containers.podman.podman_container:
    name: jenkins-agent
    image: '{{ jenkins_agent_auto_docker_image }}:{{ jenkins_agent_auto_docker_tag }}'
    recreate: '{{ docker_recreate }}'
    restart_policy: '{{ docker_restart_policy }}'
    cgroups: '{{ podman_cgroups }}'
    env:
      JENKINS_URL: '{{ jenkins_url }}'
      JENKINS_AUTH: '{{ jenkins_user }}:{{ jenkins_password }}'
      JENKINS_SLAVE_NAME: '{{ jenkins_agent_name }}'
    volumes:
      - '{{ prefix }}/jenkins/workspace:/var/jenkins_home/workspace'
    network_mode: '{{ jenkins_agent_network_mode }}'
  when:
    - jenkins_agent_deploy
    - use_podman
- name: Creating jenkins_jobs.ini
  ansible.builtin.template:
    src: jenkins_jobs.ini.j2
    dest: '{{ tmp_dir }}/jenkins_jobs.ini'
    mode: '0644'
  when:
    - jenkins_configure
- name: Creating run.yaml for {{ project }}
  ansible.builtin.template:
    src: run.yaml.j2
    dest: '{{ tmp_dir }}/{{ project }}.yaml'
    mode: '0644'
  when:
    - jenkins_create_jobs
- name: Loading Jenkins jobs
  ansible.builtin.command: |
    jenkins-jobs --conf \
      {{ tmp_dir }}/jenkins_jobs.ini update {{ tmp_dir }}/{{ project }}.yaml
  register: exit_code
  changed_when: exit_code.rc == 0
  when:
    - jenkins_configure
    - jenkins_create_jobs
