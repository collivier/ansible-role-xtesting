---
- {{ project }}-containers: &{{ project }}-containers
    name: '{{ project }}-containers'
    repo: '{repo}'
    port: '{port}'
    container: '{container}'
    tag: '{tag}'

- {{ project }}-params: &{{ project }}-params
    name: '{{ project }}-params'
    repo: '{{ repo }}'
    port:{% if dport %} {{ dport }}
{% else %}{{ None }}
{% endif %}
    tag:
{% for tag in docker_tags %}
{% for key, value in tag.items() |list %}
      - {{ key }}:
{% if (use_gerrit or git_url) and not value.branch is defined %}
          branch: master
{% endif %}
{% if (use_gerrit or git_url) and not value.dependency is defined %}
          dependency: latest
{% endif %}
{% if (use_gerrit or git_url) and not value.from is defined %}
          from:
{% endif %}
{% if (use_gerrit or git_url) and not value.buildargs is defined %}
          buildargs:
{% endif %}
{% if use_slave and not value.slave is defined %}
          slave: master
{% elif use_node and not value.node is defined %}
          node: jenkins-jenkins-agent
{% endif %}
{% for key, value in value.items() |list %}
          {{ key }}: {{ value }}
{% endfor %}
{% endfor %}
{% endfor %}

- {{ project }}-jobs: &{{ project }}-jobs
    name: '{{ project }}-jobs'
    current-parameters: true

{% if use_slave %}
- parameter:
    name: {{ project }}-slave
    parameters:
      - label:
          name: slave
          default: '{slave}'
{% elif use_node %}
- parameter:
    name: {{ project }}-node
    parameters:
      - label:
          name: node
          default: '{node}'
{% endif %}

{% if not build_only %}
{% if push_to_db == true %}
- parameter:
    name: {{ project }}-build_tag
    parameters:
      - random-string:
          name: build_tag
{% endif %}

{% for key, value in docker_args.env.items() | list %}
- parameter:
    name: {{ project }}-{{ key }}
    parameters:
      - string:
          name: {{ key }}
          default: {{ value }}
{% endfor %}

{% if job_custom_parameters is defined %}
{% for parameter in job_custom_parameters %}
- parameter:
    name: {{ project }}-{{ parameter.name }}
    parameters:
      - {{ parameter.type }}:
          name: {{ parameter.name }}
          default: {{ parameter.default }}
{% endfor %}
{% endif %}

- {{ project }}-run-containers: &{{ project }}-run-containers
    name: '{{ project }}-run-containers'
    <<: *{{ project }}-containers
    test: '{test}'
    privileged: '{privileged}'
    network: '{network}'
{% for key, value in docker_tags.0.items() |list %}
{% for key, value in value.items() |list %}
{% if not (key=='branch' or key=='slave' or key=='node' or key=='dependency') %}
    {{ key }}: {{ "'{" + key + "}'" }}
{% endif %}
{% endfor %}
{% endfor %}

- builder:
    name: {{ project }}-pull-containers
    builders:
      - shell: |
          set +x
          if [ "{repo}" = "_" ]; then
            image={container}:{tag}
          elif [ "{port}" = "None" ]; then
            image={repo}/{container}:{tag}
          else
            image={repo}:{port}/{container}:{tag}
          fi
          {{ sudo1 }}docker pull $image

- builder:
    name: {{ project }}-run-containers
    builders:
      - shell: |
          set +x
          [ ! -z "$WORKSPACE" ] && {{sudo1 }}rm -rf $WORKSPACE/results || true
{% if job_custom_parameters is defined %}
{% for parameter in job_custom_parameters %}
{% if parameter.type == "text" %}
{% if parameter.dest is defined %}
{% if use_kubernetes and not use_slave %}
          echo "${{ parameter.name }}" > $WORKSPACE/{{ parameter.dest }}
{% else %}
          echo "${{ parameter.name }}" > {{ jenkins_workspace }}/$JOB_NAME/{{ parameter.dest }}
{% endif %}
{% endif %}
{% endif %}
{% endfor %}
{% endif %}
          if [ "{repo}" = "_" ]; then
            image={container}:{tag}
          elif [ "{port}" = "None" ]; then
            image={repo}/{container}:{tag}
          else
            image={repo}:{port}/{container}:{tag}
          fi
          {{ sudo1 }}docker run --rm \
            --privileged={privileged} \
            --network={network} \
{% if publish_to_s3 == true %}
            -e S3_ENDPOINT_URL={{ s3_endpoint_url }} \
            -e S3_DST_URL={{ s3_dst_url }}/$BUILD_TAG/$JOB_NAME-$BUILD_ID \
            -e HTTP_DST_URL={{ http_dst_url }}/$BUILD_TAG/$JOB_NAME-$BUILD_ID \
{% if s3_mask_creds == false %}
            -e AWS_ACCESS_KEY_ID={{ aws_access_key_id }} \
            -e AWS_SECRET_ACCESS_KEY={{ aws_secret_access_key }} \
{% else %}
            -v {{ boto }}:/root/.boto \
{% endif %}
{% endif %}
{% if push_to_db == true %}
            -e TEST_DB_URL={{ testapi_url }}/results \
            -e TEST_DB_EXT_URL={{ testapi_ext_url }}/results \
{% if use_slave %}
            -e NODE_NAME=$slave \
{% else %}
            -e NODE_NAME={{ node_name }} \
{% endif %}
            -e BUILD_TAG=$BUILD_TAG \
{% endif %}
{% if use_kubernetes and not use_slave %}
            -v $WORKSPACE/results:/var/lib/xtesting/results \
{% else %}
            -v {{ jenkins_workspace }}/$JOB_NAME/results:/var/lib/xtesting/results \
{% endif %}
{% for key, value in docker_args.env.items() |list %}
            -e {{ key }}=${{ key }} \
{% endfor %}
{% for key, value in docker_tags.0.items() |list %}
{% for key, value in value.items() |list %}
{% if not (key=='branch' or key=='slave' or key=='node' or key=='dependency') %}
            -e {{ key }}={{ '{' + key + '}' }} \
{% endif %}
{% endfor %}
{% endfor %}
{% for volume in docker_args.volumes %}
{% if use_artifacts and not use_slave %}
            -v $WORKSPACE/{{ volume.split(':').0 |basename }}:{{ volume.split(':').1 }} \
{% elif use_artifacts and use_slave %}
            -v {{ jenkins_workspace }}/$JOB_NAME/{{ volume.split(':').0 |basename }}:{{ volume.split(':').1 }} \
{% elif use_kubernetes and not use_slave %}
            -v /etc/xtesting/{{ volume.split(':').0 |basename }}:{{ volume.split(':').1 }} \
{% else %}
            -v {{ volume }} \
{% endif %}
{% endfor %}
            $image run_tests -t {test}{% if publish_to_s3 == true %} -p{% endif %}{% if push_to_db == true %} -r{% endif %}


- builder:
    name: {{ project }}-remove-images
    builders:
      - shell: |
          set +x
          if [ "{repo}" = "_" ]; then
            image={container}:{tag}
          elif [ "{port}" = "None" ]; then
            image={repo}/{container}:{tag}
          else
            image={repo}:{port}/{container}:{tag}
          fi
          {{ sudo1 }}docker rmi $image || true

- job-template:
    name: '{{ project }}-{repo}-{container}-{tag}-pull'
{% if use_slave %}
    parameters:
      - {{ project }}-slave:
          slave: '{slave}'
{% elif use_node %}
    parameters:
      - {{ project }}-node:
          node: '{node}'
{% endif %}
    builders:
      - {{ project }}-pull-containers:
          <<: *{{ project }}-containers

{% for suite in suites %}
- project:
    name: '{{ project }}-{{ repo }}-{{ suite.container }}-pull'
    <<: *{{ project }}-params
    container: '{{ suite.container }}'
    jobs:
      - '{{ project }}-{repo}-{container}-{tag}-pull'

{% endfor %}
- job-template:
    name: '{{ project }}-{repo}-{container}-{tag}-rmi'
{% if use_slave %}
    parameters:
      - {{ project }}-slave:
          slave: '{slave}'
{% elif use_node %}
    parameters:
      - {{ project }}-node:
          node: '{node}'
{% endif %}
    builders:
      - {{ project }}-remove-images:
          <<: *{{ project }}-containers

{% for suite in suites %}
- project:
    name: '{{ project }}-{{ repo }}-{{ suite.container }}-rmi'
    <<: *{{ project }}-params
    container: '{{ suite.container }}'
    jobs:
      - '{{ project }}-{repo}-{container}-{tag}-rmi'

{% endfor %}
- job-template:
    name: '{{ project }}-{repo}-{container}-{tag}-{test}-run'
    parameters:
{% if use_slave %}
      - {{ project }}-slave:
          slave: '{slave}'
{% elif use_node %}
      - {{ project }}-node:
          node: '{node}'
{% endif %}
{% if push_to_db == true %}
      - {{ project }}-build_tag:
          build_tag: ''
{% endif %}
{% for key, value in docker_args.env.items() |list %}
      - {{ project }}-{{ key }}:
          {{ key }}: {{ value }}
{% endfor %}
{% if job_custom_parameters is defined %}
{% for parameter in job_custom_parameters %}
      - {{ project }}-{{ parameter.name }}:
          {{ parameter.name }}: {{ parameter.default }}
{% endfor %}
{% endif %}
    builders:
{% if use_artifacts == true %}
{% for volume in docker_args.volumes %}
      - copyartifact:
          project: {{ use_artifacts_from }}
          filter: {{ volume.split(':').0 |basename }}
          target: .
          which-build: upstream-build
{% endfor %}
{% endif %}
      - {{ project }}-run-containers:
          <<: *{{ project }}-run-containers

{% for suite in suites %}
- project:
    name: '{{ project }}-{{ repo }}-{{ suite.container }}'
    <<: *{{ project }}-params
    container: '{{ suite.container }}'
    test:
{% for test in suite.tests %}
      - {{ test }}
{% endfor %}
    privileged: '{{ suite.privileged | default('false') }}'
    network: {{ suite.network | default('bridge') }}
{% if suite.exclude is defined %}
    exclude:
{% for excl in suite.exclude %}
      - {{ excl }}
{% endfor %}
{% endif %}
    jobs:
      - '{{ project }}-{repo}-{container}-{tag}-{test}-run'

{% endfor %}

{% if publish_to_s3 == true and push_to_db == true %}
- builder:
    name: {{ project }}-zip
    builders:
      - shell: |
          set +x
          [ ! -z "$WORKSPACE" ] && {{sudo1 }}rm -rf $WORKSPACE/results || true
          if [ "{repo}" = "_" ]; then
            image={container}:{tag}
          elif [ "{port}" = "None" ]; then
            image={repo}/{container}:{tag}
          else
            image={repo}:{port}/{container}:{tag}
          fi
          {{ sudo1 }}docker run --rm \
            -e S3_ENDPOINT_URL={{ s3_endpoint_url }} \
            -e S3_DST_URL={{ s3_dst_url }} \
            -e HTTP_DST_URL={{ http_dst_url }} \
{% if s3_mask_creds == false %}
            -e AWS_ACCESS_KEY_ID={{ aws_access_key_id }} \
            -e AWS_SECRET_ACCESS_KEY={{ aws_secret_access_key }} \
{% else %}
            -v {{ boto }}:/root/.boto \
{% endif %}
            -e TEST_DB_URL={{ testapi_url }}/results \
            -e TEST_DB_EXT_URL={{ testapi_ext_url }}/results \
            -e BUILD_TAG=$BUILD_TAG \
{% if use_kubernetes and not use_slave %}
            -v $WORKSPACE/results:/var/lib/xtesting/results \
{% else %}
            -v {{ jenkins_workspace }}/$JOB_NAME/results:/var/lib/xtesting/results \
{% endif %}
{% for key, value in docker_args.env.items() |list %}
            -e {{ key }}=${{ key }} \
{% endfor %}
{% for volume in docker_args.volumes %}
{% if use_artifacts and not use_slave %}
            -v $WORKSPACE/{{ volume.split(':').0 |basename }}:{{ volume.split(':').1 }} \
{% elif use_artifacts and use_slave %}
            -v {{ jenkins_workspace }}/$JOB_NAME/{{ volume.split(':').0 |basename }}:{{ volume.split(':').1 }} \
{% elif use_kubernetes and not use_slave %}
            -v /etc/xtesting/{{ volume.split(':').0 |basename }}:{{ volume.split(':').1 }} \
{% else %}
            -v {{ volume }} \
{% endif %}
{% endfor %}
            $image zip_campaign

- job-template:
    name: '{{ project }}-{tag}-zip'
    parameters:
{% if use_slave %}
      - {{ project }}-slave:
          slave: '{slave}'
{% elif use_node %}
      - {{ project }}-node:
          node: '{node}'
{% endif %}
{% if push_to_db == true %}
      - {{ project }}-build_tag:
          build_tag: ''
{% endif %}
{% for key, value in docker_args.env.items() |list %}
      - {{ project }}-{{ key }}:
          {{ key }}: {{ value }}
{% endfor %}
{% if job_custom_parameters is defined %}
{% for parameter in job_custom_parameters %}
      - {{ project }}-{{ parameter.name }}:
          {{ parameter.name }}: {{ parameter.default }}
{% endfor %}
{% endif %}
    builders:
{% if use_artifacts == true %}
{% for volume in docker_args.volumes %}
      - copyartifact:
          project: {{ use_artifacts_from }}
          filter: {{ volume.split(':').0 |basename }}
          target: .
          which-build: upstream-build
{% endfor %}
{% endif %}
      - {{ project }}-zip:
          <<: *{{ project }}-containers

- project:
    name: '{{ project }}-{tag}-zip'
    <<: *{{ project }}-params
    container: '{{ suites[0].container }}'
    jobs:
      - '{{ project }}-{tag}-zip'
{% endif %}

- job-template:
    name: '{{ project }}{{ jenkins_multijob }}-{tag}-daily'
    project-type: multijob
{% if triggers %}
    triggers:
{% for trigger in triggers %}
{% for key, value in trigger.items() | list %}
      - {{ key }}: '{{ value}}'
{% endfor %}
{% endfor %}
{% endif %}
    parameters:
{% if use_slave %}
      - {{ project }}-slave:
          slave: '{slave}'
{% elif use_node %}
      - {{ project }}-node:
          node: '{node}'
{% endif %}
{% if push_to_db == true %}
      - {{ project }}-build_tag:
          build_tag: ''
{% endif %}
{% for key, value in docker_args.env.items() | list %}
      - {{ project }}-{{ key }}:
          {{ key }}: {{ value }}
{% endfor %}
{% if job_custom_parameters is defined %}
{% for parameter in job_custom_parameters %}
      - {{ project }}-{{ parameter.name }}:
          {{ parameter.name }}: {{ parameter.default }}
{% endfor %}
{% endif %}
    properties:
      - build-blocker:
          use-build-blocker: true
          {{ block_level_key }}: 'NODE'
          blocking-jobs:
            - '^{{ project }}-{tag}-(daily|docker|review)$'
    builders:
      - multijob:
          name: remove former images
          projects:
{% for suite in suites %}
            - name: '{{ project }}-{{ repo }}-{{ suite.container }}-{tag}-rmi'
              <<: *{{ project }}-jobs
{% endfor %}
      - multijob:
          name: pull containers
          projects:
{% for suite in suites %}
            - name: '{{ project }}-{{ repo }}-{{ suite.container }}-{tag}-pull'
              <<: *{{ project }}-jobs
{% endfor %}
{% for suite in suites %}
      - multijob:
          name: {{ repo }}/{{ suite.container }}:{tag}
{% if suite.properties is defined %}
{% for key, value in suite.properties.items() | list %}
          {{ key }}: {{ value}}
{% endfor %}
{% endif %}
          projects:
{% for test in suite.tests %}
            - name: '{{ project }}-{{ repo }}-{{ suite.container }}-{tag}-{{ test }}-run'
              <<: *{{ project }}-jobs
{% endfor %}
{% endfor %}
{% if publish_to_s3 == true and push_to_db == true %}
      - multijob:
          name: dump all campaign data
          projects:
            - name: '{{ project }}-{tag}-zip'
              <<: *{{ project }}-jobs
{% endif %}

- project:
    name: '{{ project }}-daily'
    <<: *{{ project }}-params
    jobs:
      - '{{ project }}{{ jenkins_multijob }}-{tag}-daily'

- view:
    name: {{ project }}
    view-type: list
    columns:
      - status
      - weather
      - job
      - last-success
      - last-failure
      - last-duration
    regex: {{ jenkins_view_daily_regex }}
{% endif %}

{% if use_gerrit or git_url %}
- {{ project }}-build-containers: &{{ project }}-build-containers
    name: '{{ project }}-build-containers'
    <<: *{{ project }}-containers
    ref_arg: '{ref_arg}'
    path: '{path}'
    buildargs: '{buildargs}'
    from: '{from}'

- builder:
    name: {{ project }}-build-containers
    builders:
      - shell: |
          set +x
          if [ "{repo}" = "_" ]; then
            image={container}:{tag}
          elif [ "{port}" = "None" ]; then
            image={repo}/{container}:{tag}
          else
            image={repo}:{port}/{container}:{tag}
          fi
          build_args=""
          if [ "{buildargs}" != "None" ]; then
            build_args="{buildargs}"
          fi
          if [ "{ref_arg}" != "None" ]; then
            build_args="$build_args --build-arg {ref_arg}={ref}"
          fi
          cd {path}
          if [ "{from}" != "None" ]; then
              sed -i {from} Dockerfile
          fi
          {{ sudo1 }}docker build $build_args \
            --pull=false --no-cache --force-rm=true \
            -t $image .

- scm:
    name: {{ project }}-scm
    scm:
      - git:
          url: '{{ git_url }}'
          refspec: '+refs/heads/*:refs/remotes/origin/* +refs/changes/*:refs/changes/*'
          branches:
            - '{ref}'

- {{ project }}-dep: &{{ project }}-dep
    name: '{{ project }}-containers'
    repo: '{repo}'
    port: '{port}'
    tag: '{tag}'
    dependency: '{dependency}'

- builder:
    name: {{ project }}-pull-dep-images
    builders:
      - shell: |
          set +x
          if [ "{{ builds.dependency.repo }}" = "_" ]; then
            image={{ builds.dependency.container }}:{dependency}
          elif [ "{{ builds.dependency.repo }}" = "None" ]; then
            image={{ builds.dependency.repo }}/{{ builds.dependency.container }}:{dependency}
          else
            image={{ builds.dependency.repo }}:{{ builds.dependency.dport }}/{{ builds.dependency.container }}{dependency}
          fi
          {{ sudo1 }}docker pull $image || true

- builder:
    name: {{ project }}-remove-dep-images
    builders:
      - shell: |
          set +x
          if [ "{{ builds.dependency.repo }}" = "_" ]; then
            image={{ builds.dependency.container }}:{dependency}
          elif [ "{{ builds.dependency.repo }}" = "None" ]; then
            image={{ builds.dependency.repo }}/{{ builds.dependency.container }}:{dependency}
          else
            image={{ builds.dependency.repo }}:{{ builds.dependency.dport }}/{{ builds.dependency.container }}{dependency}
          fi
          {{ sudo1 }}docker rmi $image || true

- job-template:
    name: '{{ project }}-{repo}-{tag}-dep-pull'
{% if use_slave %}
    parameters:
      - {{ project }}-slave:
          slave: '{slave}'
{% elif use_node %}
    parameters:
      - {{ project }}-node:
          node: '{node}'
{% endif %}
    builders:
      - {{ project }}-pull-dep-images:
          <<: *{{ project }}-dep

- project:
    name: '{{ project }}-{repo}-{tag}-dep-pull'
    <<: *{{ project }}-params
    jobs:
      - '{{ project }}-{repo}-{tag}-dep-pull'

- job-template:
    name: '{{ project }}-{repo}-{tag}-dep-rmi'
{% if use_slave %}
    parameters:
      - {{ project }}-slave:
          slave: '{slave}'
{% elif use_node %}
    parameters:
      - {{ project }}-node:
          node: '{node}'
{% endif %}
    builders:
      - {{ project }}-remove-dep-images:
          <<: *{{ project }}-dep

- project:
    name: '{{ project }}-{repo}-{tag}-dep-rmi'
    <<: *{{ project }}-params
    jobs:
      - '{{ project }}-{repo}-{tag}-dep-rmi'
{% endif %}

{% if not build_only %}
{% if use_gerrit %}
- builder:
    name: {{ project }}-tox
    builders:
      - shell: |
          set +x
          {{ sudo1 }}apt-get update && {{ sudo1 }}apt-get install software-properties-common gpg -y
          {{ sudo1 }}add-apt-repository -y ppa:deadsnakes/ppa
          {{ sudo1 }}apt-get update && {{ sudo1 }}apt-get install python3.8 python3.8-dev \
            python3.8-distutils \
            python3.7 python3.7-dev python3.6 python3.6-dev \
            python python-dev python3-pip enchant -y
          {{ sudo1 }}pip3 install tox tox-pip-version
          tox

- job-template:
    name: '{{ project }}-{tag}-tox'
    scm:
      - {{ project }}-scm:
          ref: $GERRIT_REFSPEC
    triggers:
      - {{ project }}-patchset-created:
          branch: '{branch}'
{% if use_slave %}
    parameters:
      - {{ project }}-slave:
          slave: '{slave}'
{% elif use_node %}
    parameters:
      - {{ project }}-node:
          node: '{node}'
{% endif %}
    builders:
      - {{ project }}-tox:

- project:
    name: {{ project }}-tox
    <<: *{{ project }}-params
    jobs:
      - '{{ project }}-{tag}-tox'

- job-template:
    name: '{{ project }}-{repo}-{container}-{tag}-gate'
{% if use_slave %}
    parameters:
      - {{ project }}-slave:
          slave: '{slave}'
{% elif use_node %}
    parameters:
      - {{ project }}-node:
          node: '{node}'
{% endif %}
    scm:
      - {{ project }}-scm:
          ref: $GERRIT_REFSPEC
    builders:
      - {{ project }}-build-containers:
          <<: *{{ project }}-build-containers
          ref: $GERRIT_REFSPEC
          buildargs: '{buildargs}'

{% for step in builds.steps %}
{% for container in step.containers %}
- project:
    name: {{ project }}-{{ repo }}-{{ container.name }}-{tag}-gate
    <<: *{{ project }}-params
    container: {{ container.name }}
    ref_arg:{% if container.ref_arg %} {{ container.ref_arg }}
{% else %}{{ None }}
{% endif %}
    path: {{ container.path }}
{% if container.exclude is defined %}
    exclude:
{% for excl in container.exclude %}
      - {{ excl }}
{% endfor %}
{% endif %}
    jobs:
      - '{{ project }}-{repo}-{container}-{tag}-gate'

{% endfor %}
{% endfor %}

- trigger:
    name: {{ project }}-patchset-created
    triggers:
      - gerrit:
          trigger-on:
            - patchset-created-event
            - comment-added-contains-event:
                comment-contains-value: 'recheck'
            - comment-added-contains-event:
                comment-contains-value: 'reverify'
          projects:
            - project-compare-type: 'ANT'
              project-pattern: '{{ gerrit_project }}'
              branches:
                - branch-compare-type: 'ANT'
                  branch-pattern: '**/{branch}'

- job-template:
    name: '{{ project }}{{ jenkins_multijob }}-{tag}-review'
    project-type: multijob
    triggers:
      - {{ project }}-patchset-created:
          branch: '{branch}'
    parameters:
{% if use_slave %}
      - {{ project }}-slave:
          slave: '{slave}'
{% elif use_node %}
      - {{ project }}-node:
          node: '{node}'
{% endif %}
{% if push_to_db == true %}
      - {{ project }}-build_tag:
          build_tag: ''
{% endif %}
{% for key, value in docker_args.env.items() | list %}
      - {{ project }}-{{ key }}:
          {{ key }}: {{ value }}
{% endfor %}
    properties:
      - build-blocker:
          use-build-blocker: true
          {{ block_level_key }}: 'NODE'
          blocking-jobs:
            - '^{{ project }}-{tag}-(daily|docker|review)$'
    builders:
      - multijob:
          name: remove former images
          projects:
{% for suite in suites %}
            - name: '{{ project }}-{{ repo }}-{{ suite.container }}-{tag}-rmi'
              <<: *{{ project }}-jobs
{% endfor %}
{% if builds.dependency is defined %}
      - multijob:
          name: remove dependency
          projects:
            - name: '{{ project }}-{repo}-{tag}-dep-rmi'
              <<: *{{ project }}-jobs
      - multijob:
          name: pull dependency
          projects:
            - name: '{{ project }}-{repo}-{tag}-dep-pull'
              <<: *{{ project }}-jobs
{% endif %}
{% for step in builds.steps %}
      - multijob:
          name: {{ step.name }}
          projects:
{% for container in step.containers %}
            - name: '{{ project }}-{{ repo }}-{{ container.name }}-{tag}-gate'
              <<: *{{ project }}-jobs
{% endfor %}
{% endfor %}
{% for suite in suites %}
      - multijob:
          name: {{ repo }}/{{ suite.container }}:{tag}
{% if suite.properties is defined %}
{% for key, value in suite.properties.items() | list %}
          {{ key }}: {{ value}}
{% endfor %}
{% endif %}
          projects:
{% for test in suite.tests %}
            - name: '{{ project }}-{{ repo }}-{{ suite.container }}-{tag}-{{ test }}-run'
              <<: *{{ project }}-jobs
{% endfor %}
{% endfor %}

- project:
    name: '{{ project }}-review'
    <<: *{{ project }}-params
    jobs:
      - '{{ project }}{{ jenkins_multijob }}-{tag}-review'

- view:
    name: {{ project }}-review
    view-type: list
    columns:
      - status
      - weather
      - job
      - last-success
      - last-failure
      - last-duration
    regex: {{ jenkins_view_review_regex }}

- view:
    name: {{ project }}-tox
    view-type: list
    columns:
      - status
      - weather
      - job
      - last-success
      - last-failure
      - last-duration
    regex: {{ jenkins_view_tox_regex }}
{% endif %}
{% endif %}

{% if git_url %}
- builder:
    name: {{ project }}-push-containers
    builders:
      - shell: |
          set +x
          if [ "{repo}" = "_" ]; then
            image={container}:{tag}
          elif [ "{port}" = "None" ]; then
            image={repo}/{container}:{tag}
          else
            image={repo}:{port}/{container}:{tag}
          fi
          {{ sudo1 }}docker push $image

- trigger:
    name: {{ project }}-commit
    triggers:
      - pollscm:
          cron: "*/30 * * * *"

- job-template:
    name: '{{ project }}-{repo}-{container}-{tag}-build'
    parameters:
{% if use_slave %}
      - {{ project }}-slave:
          slave: '{slave}'
{% elif use_node %}
    parameters:
      - {{ project }}-node:
          node: '{node}'
{% endif %}
    scm:
      - {{ project }}-scm:
          ref: '{branch}'
    builders:
      - {{ project }}-build-containers:
          <<: *{{ project }}-build-containers
          ref: '{branch}'
          buildargs: '{buildargs}'
      - {{ project }}-push-containers:
          <<: *{{ project }}-build-containers
          ref: '{branch}'

{% for step in builds.steps %}
{% for container in step.containers %}
- project:
    name: {{ project }}-{{ repo }}-{{ container.name }}-{tag}-build
    <<: *{{ project }}-params
    container: {{ container.name }}
    ref_arg:{% if container.ref_arg %} {{ container.ref_arg }}
{% else %}{{ None }}
{% endif %}
    path: {{ container.path }}
{% if container.exclude is defined %}
    exclude:
{% for excl in container.exclude %}
      - {{ excl }}
{% endfor %}
{% endif %}
    jobs:
      - '{{ project }}-{repo}-{container}-{tag}-build'

{% endfor %}
{% endfor %}

- job-template:
    name: '{{ project }}{{ jenkins_multijob }}-{tag}-docker'
    project-type: multijob
    triggers:
      - {{ project }}-commit
    scm:
      - {{ project }}-scm:
          ref: '{branch}'
    parameters:
{% if use_slave %}
      - {{ project }}-slave:
          slave: '{slave}'
{% elif use_node %}
      - {{ project }}-node:
          node: '{node}'
{% endif %}
    properties:
      - build-blocker:
          use-build-blocker: true
          {{ block_level_key }}: 'NODE'
          blocking-jobs:
            - '^{{ project }}-{tag}-(daily|docker|review)$'
    builders:
{% if builds.dependency is defined %}
      - multijob:
          name: remove dependency
          projects:
            - name: '{{ project }}-{repo}-{tag}-dep-rmi'
              <<: *{{ project }}-jobs
      - multijob:
          name: pull dependency
          projects:
            - name: '{{ project }}-{repo}-{tag}-dep-pull'
              <<: *{{ project }}-jobs
{% endif %}
{% for step in builds.steps %}
      - multijob:
          name: {{ step.name }}
          projects:
{% for container in step.containers %}
            - name: '{{ project }}-{{ repo }}-{{ container.name }}-{tag}-build'
              <<: *{{ project }}-jobs
{% endfor %}
{% endfor %}

- builder:
    name: {{ project }}-trivy
    builders:
      - shell: |
          {{ sudo1 }}apt-get update && {{ sudo1 }}apt-get install curl -y
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | {{ sudo1 }}sh -s -- -b .
          if [ "{repo}" = "_" ]; then
            image={container}:{tag}
          elif [ "{port}" = "None" ]; then
            image={repo}/{container}:{tag}
          else
            image={repo}:{port}/{container}:{tag}
          fi
          ./trivy --exit-code 1 $image

- job-template:
    name: '{{ project }}-{repo}-{container}-{tag}-trivy'
{% if triggers %}
    triggers:
{% for trigger in triggers %}
{% for key, value in trigger.items() | list %}
      - {{ key }}: '{{ value}}'
{% endfor %}
{% endfor %}
{% endif %}
{% if use_slave %}
    parameters:
      - {{ project }}-slave:
          slave: '{slave}'
{% elif use_node %}
    parameters:
      - {{ project }}-node:
          node: '{node}'
{% endif %}
    builders:
      - {{ project }}-trivy:
          <<: *{{ project }}-containers

{% for step in builds.steps %}
{% for container in step.containers %}
- project:
    name: '{{ project }}-{{ repo }}-{{ container.name }}-trivy'
    <<: *{{ project }}-params
    container: '{{ container.name }}'
    jobs:
      - '{{ project }}-{repo}-{container}-{tag}-trivy'

{% endfor %}
{% endfor %}
- project:
    name: '{{ project }}'
    <<: *{{ project }}-params
    jobs:
      - '{{ project }}{{ jenkins_multijob }}-{tag}-docker'

- view:
    name: {{ project }}-docker
    view-type: list
    columns:
      - status
      - weather
      - job
      - last-success
      - last-failure
      - last-duration
    regex: {{ jenkins_view_docker_regex }}

- view:
    name: {{ project }}-trivy
    view-type: list
    columns:
      - status
      - weather
      - job
      - last-success
      - last-failure
      - last-duration
    regex: {{ jenkins_view_trivy_regex }}
{% endif %}
