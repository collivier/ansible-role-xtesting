---
{% macro get_main_prefix() -%}
{%- if jenkins_multi_projects | default(false) -%}
{{ project + '-' + jenkins_extra_prefix }}
{%- else -%}
{{ jenkins_extra_prefix }}
{%- endif -%}
{% endmacro %}
{% macro get_multijob_prefix() -%}
{%- if jenkins_multi_repos | default(false) -%}
{{ project + '-' + jenkins_extra_prefix + suite.repo | default(repo) | replace ('.', '_') | replace ('/', '-') + '-' }}
{%- else -%}
{{ project + '-' + jenkins_extra_prefix }}
{%- endif -%}
{% endmacro %}
{% macro get_prefix(suite) -%}
{%- if jenkins_multi_repos | default(false) -%}
{{ get_main_prefix() + suite.repo | default(repo) | replace ('.', '_') | replace ('/', '-') + '-' }}
{%- else -%}
{{ get_main_prefix() }}
{%- endif -%}
{% endmacro %}
{% if jenkins_view_daily_regex is not defined %}
{% set jenkins_view_daily_regex = "^" + get_multijob_prefix() + "[a-z0-9.-]+" + jenkins_campaign_suffix + "$" %}
{% endif %}
{% if jenkins_view_review_regex is not defined %}
{% set jenkins_view_review_regex = "^" + get_multijob_prefix() + "[a-z0-9.-]+-review$" %}
{% endif %}
{% if jenkins_view_tox_regex is not defined %}
{% set jenkins_view_tox_regex = "^" + get_multijob_prefix() + "[a-z0-9.-]+-tox$" %}
{% endif %}
{% if jenkins_view_docker_regex is not defined %}
{% set jenkins_view_docker_regex = "^" + get_multijob_prefix() + "[a-z0-9.-]+-docker$" %}
{% endif %}
{% if jenkins_view_trivy_regex is not defined %}
{% set jenkins_view_trivy_regex = "^" + get_main_prefix() + "[a-z0-9.-]+-trivy$" %}
{% endif %}
{% if jenkins_view_grype_regex is not defined %}
{% set jenkins_view_grype_regex = "^" + get_main_prefix() + "[a-z0-9.-]+-grype$" %}
{% endif %}
{% if jenkins_view_sbom_regex is not defined %}
{% set jenkins_view_sbom_regex = "^" + get_main_prefix() + "[a-z0-9.-]+-sbom$" %}
{% endif %}
- {{ get_main_prefix() }}containers: &{{ get_main_prefix() }}containers
    name: '{{ get_main_prefix() }}containers'
    repo: '{repo}'
    port: '{port}'
    container: '{container}'
    tag: '{tag}'

- {{ get_main_prefix() }}params: &{{ get_main_prefix() }}params
    name: '{{ get_main_prefix() }}params'
    tag:
{% for tag in docker_tags %}
{% for key, value in tag.items() |list %}
      - {{ key }}:
{% if (use_gerrit or git_url) and not value.branch is defined %}
          branch: master
{% endif %}
{% if (use_gerrit or git_url) and not value.dependency is defined %}
          dependency: latest
{% endif %}
{% if (use_gerrit or git_url) and not value.from is defined %}
          from:
{% endif %}
{% if (use_gerrit or git_url) and not value.build_args is defined %}
          build_args:
{% endif %}
{% if use_node and not value.node is defined %}
          node: {{ 'jenkins-jenkins-agent' if use_kubernetes else 'built-in' }}
{% endif %}
{% for key, value in value.items() |list %}
{% if key == "build_args" %}
          build_args:
{% for key, value in value.items() |list %}
            - {{ key }}={{ value }}
{% endfor %}
{% else %}
          {{ key }}: {{ value }}
{% endif %}
{% endfor %}
{% endfor %}
{% endfor %}
{% for suite in suites %}

- {{ get_prefix(suite) }}{{ suite.container }}-params: &{{ get_prefix(suite) }}{{ suite.container }}-params
    name: '{{ get_prefix(suite) }}{{ suite.container }}-params'
    repo: '{{ suite.repo | default(repo) }}'
    container: '{{ suite.container }}'
    port:{% if suite.dport is defined and suite.dport is not none %} {{ suite.dport }}
{% else %}{{ dport |default(none) }}{%- endif +%}
    tag:
{% for tag in (suite.docker_tags | default(docker_tags)) %}
{% for key, value in tag.items() |list %}
      - {{ key }}:
{% if (use_gerrit or git_url) and not value.branch is defined %}
          branch: master
{% endif %}
{% if (use_gerrit or git_url) and not value.dependency is defined %}
          dependency: latest
{% endif %}
{% if (use_gerrit or git_url) and not value.from is defined %}
          from:
{% endif %}
{% if (use_gerrit or git_url) and not value.build_args is defined %}
          build_args:
{% endif %}
{% if use_node and not value.node is defined %}
          node: {{ 'jenkins-jenkins-agent' if use_kubernetes else 'built-in' }}
{% endif %}
{% for key, value in value.items() |list %}
          {{ key }}: {{ value }}
{% endfor %}
{% endfor %}
{% endfor %}
{% endfor %}

- {{ get_main_prefix() }}jobs: &{{ get_main_prefix() }}jobs
    name: '{{ get_main_prefix() }}jobs'
    current-parameters: true
{% if job_properties is defined %}
    {{ job_properties | to_nice_yaml |indent(4) |trim }}
{% endif %}
{% if use_node %}

- parameter:
    name: {{ get_main_prefix() }}node
    parameters:
      - label:
          name: node
          default: '{node}'
{% endif %}
{% if not build_only %}
{% if push_to_db == true %}

- parameter:
    name: {{ get_main_prefix() }}build_tag
    parameters:
      - random-string:
          name: build_tag
{% endif %}
{% for key, value in (docker_args.env | default({})).items() | list %}

- parameter:
    name: {{ get_main_prefix() }}{{ key }}
    parameters:
      - string:
          name: {{ key }}
          default: {{ value }}
{% endfor %}

- {{ get_main_prefix() }}run-containers: &{{ get_main_prefix() }}run-containers
    name: '{{ get_main_prefix() }}run-containers'
    <<: *{{ get_main_prefix() }}containers
    privileged: '{privileged}'
    volumes: '{volumes}'
    env: '{env}'
    network: '{network}'
    uid: '{uid}'
    gid: '{gid}'
    published_ports: '{published_ports}'
{% for key, value in docker_tags.0.items() |list %}
{% for key, value in value.items() |list %}
{% if not (key=='branch' or key=='node' or key=='dependency') %}
    {{ key }}: {{ "'{" + key + "}'" }}
{% endif %}
{% endfor %}
{% endfor %}
{% if not offline %}

- builder:
    name: {{ get_main_prefix() }}pull-containers
    builders:
      - shell: |
          set +x
          if [ "{repo}" = "_" ]; then
            image={container}:{tag}
          elif [ "{port}" = "None" ]; then
            image={repo}/{container}:{tag}
          else
            image={repo}:{port}/{container}:{tag}
          fi
          {{ sudo1 }}{% if use_podman %}podman {% else %}docker {% endif %}pull {% if use_podman %}--cgroup-manager cgroupfs --events-backend file {% endif %}$image
{% endif %}

- builder:
    name: {{ get_main_prefix() }}run-containers
    builders:
      - shell: |
          set +x
          volumes=;
          if [ "{volumes}" != "None" ]; then
            for i in $(echo {volumes} | tr -d '[]' |sed "s/, / /g" ); \
              do volumes="-v $i $volumes"; done
          fi
          env=;
          if [ "{env}" != "None" ]; then
            for i in $(eval echo {env} | tr -d '[]' |sed "s/, / /g" ); \
              do env="-e $i $env"; done
          fi
          published_ports=;
          if [ "{published_ports}" != "None" ]; then
            for i in $(echo {published_ports} | tr -d '[]' |sed "s/, / /g" ); \
              do published_ports="-p $i $published_ports"; done
          fi
          [ ! -z "$WORKSPACE" ] && {{sudo1 }}rm -rf $WORKSPACE/results || true
          if [ "{repo}" = "_" ]; then
            image={container}:{tag}
          elif [ "{port}" = "None" ]; then
            image={repo}/{container}:{tag}
          else
            image={repo}:{port}/{container}:{tag}
          fi
          {{ sudo1 }}mkdir -p $WORKSPACE/results
          {{ sudo1 }}chown {uid}:{gid} $WORKSPACE/results
          {{ sudo1 }}{% if use_podman %}podman {% else %}docker {% endif %}run {% if use_podman %}--cgroup-manager cgroupfs --events-backend file {% endif %}--rm \
            --privileged={privileged} \
            --network={network} \
            $volumes \
            $env \
            $published_ports \
{% if publish_to_s3 == true %}
            -e S3_ENDPOINT_URL={{ s3_endpoint_url }} \
            -e S3_DST_URL={{ s3_dst_url }}/$BUILD_TAG/$JOB_NAME-$BUILD_ID \
            -e HTTP_DST_URL={{ http_dst_url }}/$BUILD_TAG/$JOB_NAME-$BUILD_ID \
{% if s3_mask_creds == false %}
            -e AWS_ACCESS_KEY_ID={{ aws_access_key_id }} \
            -e AWS_SECRET_ACCESS_KEY={{ aws_secret_access_key }} \
{% else %}
            -v {{ boto }}:/etc/boto.cfg \
{% endif %}
{% endif %}
{% if push_to_db == true %}
            -e TEST_DB_URL={{ testapi_url }}/results \
            -e TEST_DB_EXT_URL={{ testapi_ext_url }}/results \
{% if use_node %}
            -e NODE_NAME=$node \
{% else %}
            -e NODE_NAME={{ node_name }} \
{% endif %}
            -e BUILD_TAG=$BUILD_TAG \
{% endif %}
{% if (use_kubernetes and not use_node) or use_podman %}
            -v $WORKSPACE/results:/var/lib/xtesting/results \
{% else %}
            -v {{ jenkins_workspace }}/$JOB_NAME/results:/var/lib/xtesting/results \
{% endif %}
{% for key, value in docker_tags.0.items() |list %}
{% for key, value in value.items() |list %}
{% if not (key=='branch' or key=='node' or key=='dependency' or key=='build_args') %}
            -e {{ key }}={{ '{' + key + '}' }} \
{% endif %}
{% endfor %}
{% endfor %}
            $image run_tests -t {test}{% if publish_to_s3 == true %} -p{% endif %}{% if push_to_db == true %} -r
{% endif %}
{% if not offline %}

- builder:
    name: {{ get_main_prefix() }}remove-images
    builders:
      - shell: |
          set +x
          if [ "{repo}" = "_" ]; then
            image={container}:{tag}
          elif [ "{port}" = "None" ]; then
            image={repo}/{container}:{tag}
          else
            image={repo}:{port}/{container}:{tag}
          fi
          {{ sudo1 }}{% if use_podman %}podman {% else %}docker {% endif %}rmi {% if use_podman %}--cgroup-manager cgroupfs --events-backend file {% endif %}$image || true
{% if not (use_kubernetes and not use_node) %}
{% for suite in suites %}

- job-template:
    name: '{{ get_prefix(suite) }}{{ suite.container }}-{tag}-pull'
{% if use_node %}
    parameters:
      - {{ get_main_prefix() }}node:
          node: '{node}'
{% endif %}
    builders:
      - {{ get_main_prefix() }}pull-containers:
          <<: *{{ get_main_prefix() }}containers

- project:
    name: '{{ get_prefix(suite) }}{{ suite.container }}-pull'
    <<: *{{ get_prefix(suite) }}{{ suite.container }}-params
    jobs:
      - '{{ get_prefix(suite) }}{{ suite.container }}-{tag}-pull'

- job-template:
    name: '{{ get_prefix(suite) }}{{ suite.container }}-{tag}-rmi'
{% if use_node %}
    parameters:
      - {{ get_main_prefix() }}node:
          node: '{node}'
{% endif %}
    builders:
      - {{ get_main_prefix() }}remove-images:
          <<: *{{ get_main_prefix() }}containers

- project:
    name: '{{ get_prefix(suite) }}{{ suite.container }}-rmi'
    <<: *{{ get_prefix(suite) }}{{ suite.container }}-params
    jobs:
      - '{{ get_prefix(suite) }}{{ suite.container }}-{tag}-rmi'
{% endfor %}
{% endif %}
{% endif %}
{% for suite in suites %}
{% if suite.docker_args is defined %}
{% for key, value in (suite.docker_args.env |default({})).items() | list %}

- parameter:
    name: {{ get_prefix(suite) }}{{ suite.container }}-{{ key }}
    parameters:
      - string:
          name: {{ key }}
          default: {{ value }}
{% endfor %}
{% endif %}

- job-template:
    name: '{{ get_prefix(suite) }}{{ suite.container }}-{tag}-{test}{{ jenkins_extra_suffix }}'
    parameters:
{% if use_node %}
      - {{ get_main_prefix() }}node:
          node: '{node}'
{% endif %}
{% if push_to_db == true %}
      - {{ get_main_prefix() }}build_tag:
          build_tag: ''
{% endif %}
{% if suite.docker_args is defined %}
{% for key, value in (suite.docker_args.env |default({})).items() |list %}
      - {{ get_main_prefix() }}{{ suite.repo | default(repo) }}-{{ suite.container }}-{{ key }}:
          {{ key }}: {{ value }}
{% endfor %}
{% else %}
{% for key, value in (docker_args.env |default({})).items() |list %}
      - {{ get_main_prefix() }}{{ key }}:
          {{ key }}: {{ value }}
{% endfor %}
{% endif %}
    builders:
{% if use_artifacts == true %}
{% for volume in docker_args.volumes %}
      - copyartifact:
          project: {{ use_artifacts_from }}
          filter: {{ volume.split(':').0 |basename }}
          target: .
          which-build: upstream-build
{% endfor %}
{% endif %}
      - {{ get_main_prefix() }}run-containers:
          <<: *{{ get_main_prefix() }}run-containers
          test: '{test}'

- project:
    name: '{{ get_prefix(suite) }}{{ suite.container }}'
    <<: *{{ get_prefix(suite) }}{{ suite.container }}-params
    volumes:
{% for volume in ((suite.docker_args |default (docker_args)).volumes | default([])) %}
{% if use_artifacts and not use_node %}
      - $WORKSPACE/{{ volume.split(':').0 |basename }}:{{ volume.split(':').1 }}
{% elif use_artifacts and use_node %}
      - {{ jenkins_workspace }}/$JOB_NAME/{{ volume.split(':').0 |basename }}:{{ volume.split(':').1 }}
{% elif use_kubernetes and not use_node %}
      - /etc/xtesting/{{ volume.split(':').0 |basename }}:{{ volume.split(':').1 }}
{% else %}
      - {{ volume }}
{% endif %}
{% endfor %}
    env:
{% for key, value in ((suite.docker_args |default (docker_args)).env | default({})).items() |list %}
      - {{ key }}=${{ key }}
{% endfor %}
    published_ports:
{% for port in ((suite.docker_args |default (docker_args)).published_ports | default([])) %}
      - {{ port }}
{% endfor %}
    container: '{{ suite.container }}'
    test:
{% for test in suite.tests %}
      - {{ test }}
{% endfor %}
    privileged: '{{ suite.privileged | default('false') }}'
    network: {{ suite.network | default('bridge') }}
    uid: {{ suite.uid | default('1000') }}
    gid: {{ suite.gid | default('1000') }}
{% if suite.exclude is defined %}
    exclude:
      {{ suite.exclude | to_nice_yaml(indent=2) | indent(width=6) | trim }}
{% endif %}
    jobs:
      - '{{ get_prefix(suite) }}{{ suite.container }}-{tag}-{test}{{ jenkins_extra_suffix }}'
{% endfor %}
{% if publish_to_s3 == true and push_to_db == true %}

- builder:
    name: {{ get_main_prefix() }}zip
    builders:
      - shell: |
          set +x
          volumes=;
          if [ "{volumes}" != "None" ]; then
            for i in $(echo {volumes} | tr -d '[]' |sed "s/, / /g" ); \
              do volumes="-v $i $volumes"; done
          fi
          env=;
          if [ "{env}" != "None" ]; then
            for i in $(eval echo {env} | tr -d '[]' |sed "s/, / /g" ); \
              do env="-e $i $env"; done
          fi
          published_ports=;
          if [ "{published_ports}" != "None" ]; then
            for i in $(echo {published_ports} | tr -d '[]' |sed "s/, / /g" ); \
              do published_ports="-p $i $published_ports"; done
          fi
          [ ! -z "$WORKSPACE" ] && {{sudo1 }}rm -rf $WORKSPACE/results || true
          if [ "{repo}" = "_" ]; then
            image={container}:{tag}
          elif [ "{port}" = "None" ]; then
            image={repo}/{container}:{tag}
          else
            image={repo}:{port}/{container}:{tag}
          fi
          {{ sudo1 }}mkdir -p $WORKSPACE/results
          {{ sudo1 }}chown {uid}:{gid} $WORKSPACE/results
          {{ sudo1 }}{% if use_podman %}podman {% else %}docker {% endif %}run {% if use_podman %}--cgroup-manager cgroupfs --events-backend file {% endif %}--rm \
            --privileged={privileged} \
            --network={network} \
            $volumes \
            $env \
            $published_ports \
            -e S3_ENDPOINT_URL={{ s3_endpoint_url }} \
            -e S3_DST_URL={{ s3_dst_url }} \
            -e HTTP_DST_URL={{ http_dst_url }} \
{% if s3_mask_creds == false %}
            -e AWS_ACCESS_KEY_ID={{ aws_access_key_id }} \
            -e AWS_SECRET_ACCESS_KEY={{ aws_secret_access_key }} \
{% else %}
            -v {{ boto }}:/etc/boto.cfg \
{% endif %}
            -e TEST_DB_URL={{ testapi_url }}/results \
            -e TEST_DB_EXT_URL={{ testapi_ext_url }}/results \
{% if use_node %}
            -e NODE_NAME=$node \
{% else %}
            -e NODE_NAME={{ node_name }} \
{% endif %}
            -e BUILD_TAG=$BUILD_TAG \
{% if (use_kubernetes and not use_node) or use_podman %}
            -v $WORKSPACE/results:/var/lib/xtesting/results \
{% else %}
            -v {{ jenkins_workspace }}/$JOB_NAME/results:/var/lib/xtesting/results \
{% endif %}
{% for key, value in docker_tags.0.items() |list %}
{% for key, value in value.items() |list %}
{% if not (key=='branch' or key=='node' or key=='dependency' or key=='build_args') %}
            -e {{ key }}={{ '{' + key + '}' }} \
{% endif %}
{% endfor %}
{% endfor %}
            $image zip_campaign

- job-template:
    name: '{{ get_prefix(suites |first) }}{{ (suites |first).container }}-{tag}-zip'
    parameters:
{% if use_node %}
      - {{ get_main_prefix() }}node:
          node: '{node}'
{% endif %}
{% if push_to_db == true %}
      - {{ get_main_prefix() }}build_tag:
          build_tag: ''
{% endif %}
{% for key, value in (docker_args.env |default({})).items() |list %}
      - {{ get_main_prefix() }}{{ key }}:
          {{ key }}: {{ value }}
{% endfor %}
    builders:
{% if use_artifacts == true %}
{% for volume in docker_args.volumes %}
      - copyartifact:
          project: {{ use_artifacts_from }}
          filter: {{ volume.split(':').0 |basename }}
          target: .
          which-build: upstream-build
{% endfor %}
{% endif %}
      - {{ get_main_prefix() }}zip:
          <<: *{{ get_main_prefix() }}run-containers

- project:
    name: '{{ get_prefix(suites |first) }}{{ (suites |first).container }}-zip'
    <<: *{{ get_prefix(suites |first) }}{{ (suites |first).container }}-params
    volumes:
{% for volume in (((suites |first).docker_args |default (docker_args)).volumes |default([])) %}
{% if use_artifacts and not use_node %}
      - $WORKSPACE/{{ volume.split(':').0 |basename }}:{{ volume.split(':').1 }}
{% elif use_artifacts and use_node %}
      - {{ jenkins_workspace }}/$JOB_NAME/{{ volume.split(':').0 |basename }}:{{ volume.split(':').1 }}
{% elif use_kubernetes and not use_node %}
      - /etc/xtesting/{{ volume.split(':').0 |basename }}:{{ volume.split(':').1 }}
{% else %}
      - {{ volume }}
{% endif %}
{% endfor %}
    env:
{% for key, value in (((suites |first).docker_args |default (docker_args)).env |default({})).items() |list %}
      - {{ key }}=${{ key }}
{% endfor %}
    published_ports:
{% for port in (((suites |first).docker_args |default(docker_args)).published_ports |default([])) %}
      - {{ port }}
{% endfor %}
    container: '{{ (suites  |first).container }}'
    privileged: '{{ suite.privileged | default('false') }}'
    network: {{ suite.network | default('bridge') }}
    uid: {{ suite.uid | default('1000') }}
    gid: {{ suite.gid | default('1000') }}
    jobs:
      - '{{ get_prefix(suites |first) }}{{ (suites |first).container }}-{tag}-zip'
{% endif %}

- job-template:
    name: '{{ get_multijob_prefix() }}{tag}{{ jenkins_campaign_suffix }}'
    project-type: multijob
{% if triggers %}
    triggers:
{% for trigger in triggers %}
{% for key, value in trigger.items() | list %}
      - {{ key }}: '{{ value}}'
{% endfor %}
{% endfor %}
{% endif %}
    parameters:
{% if use_node %}
      - {{ get_main_prefix() }}node:
          node: '{node}'
{% endif %}
{% if push_to_db == true %}
      - {{ get_main_prefix() }}build_tag:
          build_tag: ''
{% endif %}
{% for key, value in (docker_args.env |default({})).items() | list %}
      - {{ get_main_prefix() }}{{ key }}:
          {{ key }}: {{ value }}
{% endfor %}
{% if properties is defined %}
    # PyYAML and yamllint differ here
    # see https://github.com/yaml/pyyaml/issues/234
    # yamllint disable rule:indentation
    properties:
      {{ properties | to_nice_yaml(indent=2) | indent(width=6) | trim }}
    # yamllint enable rule:indentation
{% endif %}
    builders:
{% if not ((use_kubernetes and not use_node) or offline) %}
      - multijob:
          name: remove former images
          projects:
{% for suite in suites %}
            - name: '{{ get_prefix(suite) }}{{ suite.container }}-{% if suite.docker_tags is defined %}{{ suite.docker_tags.0.keys() | first }}{% else %}{tag}{% endif %}-rmi'
              <<: *{{ get_main_prefix() }}jobs
{% endfor %}
      - multijob:
          name: pull containers
          projects:
{% for suite in suites %}
            - name: '{{ get_prefix(suite) }}{{ suite.container }}-{% if suite.docker_tags is defined %}{{ suite.docker_tags.0.keys() | first }}{% else %}{tag}{% endif %}-pull'
              <<: *{{ get_main_prefix() }}jobs
{% endfor %}
{% endif %}
{% for suite in suites %}
      - multijob:
          name: {{ suite.repo | default(repo) }}/{{ suite.container | replace ('/', '-') }}:{% if suite.docker_tags is defined %}{{ suite.docker_tags.0.keys() | first }}
{% else %}{tag}
{% endif %}
{% if suite.properties is defined %}
{% for key, value in suite.properties.items() | list %}
          {{ key }}: {{ value}}
{% endfor %}
{% endif %}
          projects:
{% for test in suite.tests %}
            - name: '{{ get_prefix(suite) }}{{ suite.container }}-{% if suite.docker_tags is defined %}{{ suite.docker_tags.0.keys() | first }}{% else %}{tag}{% endif %}-{{ test }}{{ jenkins_extra_suffix }}'
              <<: *{{ get_main_prefix() }}jobs
{% endfor %}
{% endfor %}
{% if publish_to_s3 == true and push_to_db == true %}
      - multijob:
          name: dump all campaign data
          projects:
            - name: '{{ get_prefix(suites |first) }}{{ (suites |first).container }}-{tag}-zip'
              <<: *{{ get_main_prefix() }}jobs
{% endif %}
{% if jenkins_publishers %}
    publishers:
      {{ jenkins_publishers | to_nice_yaml(indent=2) | indent(width=6) | trim }}
{% endif %}
{% if jenkins_wrappers %}
    wrappers:
      {{ jenkins_wrappers | to_nice_yaml(indent=2) | indent(width=6) | trim }}
{% endif %}

- project:
    name: '{{ get_multijob_prefix() | trim('-') + jenkins_campaign_suffix }}'
    <<: *{{ get_main_prefix() }}params
    jobs:
      - '{{ get_multijob_prefix() }}{tag}{{ jenkins_campaign_suffix }}'

- view:
    name: {{ project + '-' + jenkins_extra_prefix |trim('-') }}
    view-type: list
    columns:
      - status
      - weather
      - job
      - last-success
      - last-failure
      - last-duration
    regex: {{ jenkins_view_daily_regex }}
{% endif %}
{% if (use_gerrit or git_url) and not offline %}

- {{ get_main_prefix() }}build-containers: &{{ get_main_prefix() }}build-containers
    name: '{{ get_main_prefix() }}build-containers'
    <<: *{{ get_main_prefix() }}containers
    ref_arg: '{ref_arg}'
    path: '{path}'
    build_args: '{build_args}'
    from: '{from}'

- builder:
    name: {{ get_main_prefix() }}build-containers
    builders:
      - shell: |
          set +x
          if [ "{repo}" = "_" ]; then
            image={container}:{tag}
          elif [ "{port}" = "None" ]; then
            image={repo}/{container}:{tag}
          else
            image={repo}:{port}/{container}:{tag}
          fi
          build_args=""
          if [ "{build_args}" != "None" ]; then
            for i in $(echo {build_args} | tr -d '[]' |sed "s/, / /g" ); \
              do build_args="--build-arg $i $build_args"; done
          fi
          if [ "{ref_arg}" != "None" ]; then
            build_args="$build_args --build-arg {ref_arg}={ref}"
          fi
          cd {path}
          if [ "{from}" != "None" ]; then
              sed -i {from} Dockerfile
          fi
          {{ sudo1 }}{% if use_podman %}podman {% else %}docker {% endif %}build {% if use_podman %}--cgroup-manager cgroupfs --events-backend file {% endif %}$build_args \
            --pull=false --no-cache --force-rm=true \
            -t $image .

- scm:
    name: {{ get_main_prefix() }}scm
    scm:
      - git:
          url: '{{ git_url }}'
          refspec: '+refs/heads/*:refs/remotes/origin/* +refs/changes/*:refs/changes/*'
          branches:
            - '{ref}'

- {{ get_main_prefix() }}dep: &{{ get_main_prefix() }}dep
    name: '{{ get_main_prefix() }}containers'
    repo: '{repo}'
    container: '{container}'
    port: '{port}'
    tag: '{dependency}'

- job-template:
    name: '{{ get_multijob_prefix() }}{tag}-dep-pull'
{% if use_node %}
    parameters:
      - {{ get_main_prefix() }}node:
          node: '{node}'
{% endif %}
    builders:
      - {{ get_main_prefix() }}pull-containers:
          <<: *{{ get_main_prefix() }}dep

- {{ get_main_prefix() }}dep-params: &{{ get_main_prefix() }}dep-params
    name: '{{ get_main_prefix() }}dep-params'
    repo: '{{ builds.dependency.repo | default(repo) }}'
    container: '{{ builds.dependency.container }}'
    port:{% if builds.dependency.dport is defined and builds.dependency.dport is not none %} {{ builds.dependency.dport }}
{% else %}{{ dport |default(none) }}{%- endif +%}
    tag:
{% for tag in (docker_tags) %}
{% for key, value in tag.items() |list %}
      - {{ key }}:
{% if (use_gerrit or git_url) %}
          dependency: {{ value.dependency | default('latest') }}
{% endif %}
{% if use_node and not value.node is defined %}
          node: {{ 'jenkins-jenkins-agent' if use_kubernetes else 'built-in' }}
{% endif %}
{% endfor %}
{% endfor %}

- project:
    name: '{{ get_multijob_prefix() }}dep-pull'
    <<: *{{ get_main_prefix() }}dep-params
    jobs:
      - '{{ get_multijob_prefix() }}{tag}-dep-pull'

- job-template:
    name: '{{ get_multijob_prefix() }}{tag}-dep-rmi'
{% if use_node %}
    parameters:
      - {{ get_main_prefix() }}node:
          node: '{node}'
{% endif %}
    builders:
      - {{ get_main_prefix() }}remove-images:
          <<: *{{ get_main_prefix() }}dep

- project:
    name: '{{ get_multijob_prefix() }}dep-rmi'
    <<: *{{ get_main_prefix() }}dep-params
    jobs:
      - '{{ get_multijob_prefix() }}{tag}-dep-rmi'
{% endif %}
{% if not build_only %}
{% if use_gerrit %}

- builder:
    name: {{ get_main_prefix() }}tox
    builders:
      - shell: |
          set +x
{% for key, value in (docker_args.env |default({})).items() | list %}
{% if "proxy" in (key | lower) %}
          export {{ key }}={{ value }}
{% endif %}
{% endfor %}
          {{ install_tox_deps | indent( width=10, first=false) }}
          tox

- job-template:
    name: '{{ get_multijob_prefix() }}{tag}-tox'
    scm:
      - {{ get_main_prefix() }}scm:
          ref: $GERRIT_REFSPEC
    triggers:
      - {{ get_main_prefix() }}patchset-created:
          branch: '{branch}'
{% if use_node %}
    parameters:
      - {{ get_main_prefix() }}node:
          node: '{node}'
{% endif %}
    builders:
      - {{ get_main_prefix() }}tox:

- project:
    name: {{ get_multijob_prefix() }}tox
    <<: *{{ get_main_prefix() }}params
    jobs:
      - '{{ get_multijob_prefix() }}{tag}-tox'

{% for step in builds.steps %}
{% for container in step.containers %}
- job-template:
    name: '{{ get_prefix(container) }}{{ container.name }}-{tag}-gate'
{% if use_node %}
    parameters:
      - {{ get_main_prefix() }}node:
          node: '{node}'
{% endif %}
    scm:
      - {{ get_main_prefix() }}scm:
          ref: $GERRIT_REFSPEC
    builders:
      - {{ get_main_prefix() }}build-containers:
          <<: *{{ get_main_prefix() }}build-containers
          ref: $GERRIT_REFSPEC
          build_args: '{build_args}'

- project:
    name: {{ get_prefix(container) }}{{ container.name }}-gate
    <<: *{{ get_main_prefix() }}params
    repo: {{ container.repo |default(repo) }}
    port:{% if container.dport is defined and container.dport is not none %} {{ container.dport }}
{% else %}{{ dport |default(none) }}{%- endif +%}
    container: {{ container.name }}
    ref_arg:{% if container.ref_arg %} {{ container.ref_arg }}
{% else %}{{ None }}
{% endif %}
    path: {{ container.path }}
{% if container.exclude is defined %}
    exclude:
{% for excl in container.exclude %}
      - {{ excl }}
{% endfor %}
{% endif %}
    jobs:
      - '{{ get_prefix(container) }}{{ container.name }}-{tag}-gate'

{% endfor %}
{% endfor %}
- trigger:
    name: {{ get_main_prefix() }}patchset-created
    triggers:
      - gerrit:
          trigger-on:
            - patchset-created-event
            - comment-added-contains-event:
                comment-contains-value: 'recheck'
            - comment-added-contains-event:
                comment-contains-value: 'reverify'
          projects:
            - project-compare-type: 'ANT'
              project-pattern: '{{ gerrit_project }}'
              branches:
                - branch-compare-type: 'ANT'
                  branch-pattern: '**/{branch}'

- job-template:
    name: '{{ get_multijob_prefix() }}{tag}-review'
    project-type: multijob
    triggers:
      - {{ get_main_prefix() }}patchset-created:
          branch: '{branch}'
    parameters:
{% if use_node %}
      - {{ get_main_prefix() }}node:
          node: '{node}'
{% endif %}
{% if push_to_db == true %}
      - {{ get_main_prefix() }}build_tag:
          build_tag: ''
{% endif %}
{% for key, value in (docker_args.env |default({})).items() | list %}
      - {{ get_main_prefix() }}{{ key }}:
          {{ key }}: {{ value }}
{% endfor %}
{% if properties is defined %}
    # PyYAML and yamllint differ here
    # see https://github.com/yaml/pyyaml/issues/234
    # yamllint disable rule:indentation
    properties:
      {{ properties | to_nice_yaml(indent=2) | indent(width=6) | trim }}
    # yamllint enable rule:indentation
{% endif %}
    builders:
      - multijob:
          name: remove former images
          projects:
{% for suite in suites %}
            - name: '{{ get_prefix(suite) }}{{ suite.container }}-{tag}-rmi'
              <<: *{{ get_main_prefix() }}jobs
{% endfor %}
{% if builds.dependency is defined %}
      - multijob:
          name: remove dependency
          projects:
            - name: '{{ get_multijob_prefix() }}{tag}-dep-rmi'
              <<: *{{ get_main_prefix() }}jobs
      - multijob:
          name: pull dependency
          projects:
            - name: '{{ get_multijob_prefix() }}{tag}-dep-pull'
              <<: *{{ get_main_prefix() }}jobs
{% endif %}
{% for step in builds.steps %}
      - multijob:
          name: {{ step.name }}
          projects:
{% for container in step.containers %}
            - name: '{{ get_prefix(container) }}{{ container.name }}-{tag}-gate'
              <<: *{{ get_main_prefix() }}jobs
{% endfor %}
{% endfor %}
{% for suite in suites %}
{% if not suite.repo is defined or suite.repo == repo %}
      - multijob:
          name: {{ repo }}/{{ suite.container }}:{tag}
{% if suite.properties is defined %}
{% for key, value in suite.properties.items() | list %}
          {{ key }}: {{ value}}
{% endfor %}
{% endif %}
          projects:
{% for test in suite.tests %}
            - name: '{{ get_prefix(suite) }}{{ suite.container }}-{tag}-{{ test }}{{ jenkins_extra_suffix }}'
              <<: *{{ get_main_prefix() }}jobs
{% endfor %}
{% endif %}
{% endfor %}
{% if jenkins_publishers %}
    publishers:
      {{ jenkins_publishers | to_nice_yaml(indent=2) | indent(width=6) | trim }}
{% endif %}
{% if jenkins_wrappers %}
    wrappers:
      {{ jenkins_wrappers | to_nice_yaml(indent=2) | indent(width=6) | trim }}
{% endif %}

- project:
    name: '{{ get_multijob_prefix() }}review'
    <<: *{{ get_main_prefix() }}params
    jobs:
      - '{{ get_multijob_prefix() }}{tag}-review'

- view:
    name: {{ project + '-' + jenkins_extra_prefix }}review
    view-type: list
    columns:
      - status
      - weather
      - job
      - last-success
      - last-failure
      - last-duration
    regex: {{ jenkins_view_review_regex }}$

- view:
    name: {{ project + '-' + jenkins_extra_prefix }}tox
    view-type: list
    columns:
      - status
      - weather
      - job
      - last-success
      - last-failure
      - last-duration
    regex: {{ jenkins_view_tox_regex }}
{% endif %}
{% endif %}
{% if git_url %}

- builder:
    name: {{ get_main_prefix() }}push-containers
    builders:
      - shell: |
          set +x
          if [ "{repo}" = "_" ]; then
            image={container}:{tag}
          elif [ "{port}" = "None" ]; then
            image={repo}/{container}:{tag}
          else
            image={repo}:{port}/{container}:{tag}
          fi
          {{ sudo1 }}{% if use_podman %}podman {% else %}docker {% endif %}push {% if use_podman %}--cgroup-manager cgroupfs --events-backend file {% endif %}$image

- trigger:
    name: {{ get_main_prefix() }}commit
    triggers:
      - pollscm:
          cron: "{{ jenkins_pollscm }}"

{% for step in builds.steps %}
{% for container in step.containers %}
- job-template:
    name: '{{ get_prefix(container) }}{{ container.name }}-{tag}-build'
    parameters:
{% if use_node %}
      - {{ get_main_prefix() }}node:
          node: '{node}'
{% endif %}
    scm:
      - {{ get_main_prefix() }}scm:
          ref: '{branch}'
    builders:
      - {{ get_main_prefix() }}build-containers:
          <<: *{{ get_main_prefix() }}build-containers
          ref: '{branch}'
          build_args: '{build_args}'
      - {{ get_main_prefix() }}push-containers:
          <<: *{{ get_main_prefix() }}build-containers
          ref: '{branch}'

- project:
    name: {{ get_prefix(container) }}{{ container.name }}-build
    <<: *{{ get_main_prefix() }}params
    repo: {{ container.repo | default(repo) }}
    container: {{ container.name }}
    port:{% if container.dport is defined and container.dport is not none %} {{ container.dport }}
{% else %}{{ dport |default(none) }}{%- endif +%}
    ref_arg:{% if container.ref_arg %} {{ container.ref_arg }}
{% else %}{{ None }}
{% endif %}
    path: {{ container.path }}
{% if container.exclude is defined %}
    exclude:
{% for excl in container.exclude %}
      - {{ excl | trim }}
{% endfor %}
{% endif %}
    jobs:
      - '{{ get_prefix(container) }}{{ container.name }}-{tag}-build'

{% endfor %}
{% endfor %}
- job-template:
    name: '{{ get_multijob_prefix() }}{tag}-docker'
    project-type: multijob
    triggers:
      - {{ get_main_prefix() }}commit
    scm:
      - {{ get_main_prefix() }}scm:
          ref: '{branch}'
    parameters:
{% if use_node %}
      - {{ get_main_prefix() }}node:
          node: '{node}'
{% endif %}
{% if properties is defined %}
    # PyYAML and yamllint differ here
    # see https://github.com/yaml/pyyaml/issues/234
    # yamllint disable rule:indentation
    properties:
      {{ properties | to_nice_yaml(indent=2) | indent(width=6) | trim }}
    # yamllint enable rule:indentation
{% endif %}
    builders:
{% if builds.dependency is defined %}
      - multijob:
          name: remove dependency
          projects:
            - name: '{{ get_multijob_prefix() }}{tag}-dep-rmi'
              <<: *{{ get_main_prefix() }}jobs
      - multijob:
          name: pull dependency
          projects:
            - name: '{{ get_multijob_prefix() }}{tag}-dep-pull'
              <<: *{{ get_main_prefix() }}jobs
{% endif %}
{% for step in builds.steps %}
      - multijob:
          name: {{ step.name }}
          projects:
{% for container in step.containers %}
            - name: '{{ get_prefix(container) }}{{ container.name }}-{tag}-build'
              <<: *{{ get_main_prefix() }}jobs
{% endfor %}
{% endfor %}
{% if jenkins_publishers %}
    publishers:
      {{ jenkins_publishers | to_nice_yaml(indent=2) | indent(width=6) | trim }}
{% endif %}
{% if jenkins_wrappers %}
    wrappers:
      {{ jenkins_wrappers | to_nice_yaml(indent=2) | indent(width=6) | trim }}
{% endif %}

- project:
    name: '{{ get_multijob_prefix() }}docker'
    <<: *{{ get_main_prefix() }}params
    jobs:
      - '{{ get_multijob_prefix() }}{tag}-docker'

- builder:
    name: {{ get_main_prefix() }}trivy
    builders:
      - shell: |
{% for key, value in (docker_args.env |default ({})).items() | list %}
{% if "proxy" in (key | lower) %}
          export {{ key }}={{ value }}
{% endif %}
{% endfor %}
          {{ install_trivy_deps | indent( width=10, first=false) }}
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | {{ sudo1 }}sh -s -- -b .
          if [ "{repo}" = "_" ]; then
            image={container}:{tag}
          elif [ "{port}" = "None" ]; then
            image={repo}/{container}:{tag}
          else
            image={repo}:{port}/{container}:{tag}
          fi
          ./trivy image --exit-code 1 $image

{% for step in builds.steps %}
{% for container in step.containers %}
- job-template:
    name: '{{ get_prefix(container) }}{{ container.name }}-{tag}-trivy'
{% if triggers %}
    triggers:
{% for trigger in triggers %}
{% for key, value in trigger.items() | list %}
      - {{ key }}: '{{ value}}'
{% endfor %}
{% endfor %}
{% endif %}
{% if use_node %}
    parameters:
      - {{ get_main_prefix() }}node:
          node: '{node}'
{% endif %}
    builders:
      - {{ get_main_prefix() }}trivy:
          <<: *{{ get_main_prefix() }}containers
{% if jenkins_publishers %}
    publishers:
      {{ jenkins_publishers | to_nice_yaml(indent=2) | indent(width=6) | trim }}
{% endif %}
{% if jenkins_wrappers %}
    wrappers:
      {{ jenkins_wrappers | to_nice_yaml(indent=2) | indent(width=6) | trim }}
{% endif %}

- project:
    name: '{{ get_prefix(container) }}{{ container.name }}-trivy'
    <<: *{{ get_main_prefix() }}params
    repo: '{{ container.repo | default (repo) }}'
    container: '{{ container.name }}'
    port:{% if container.dport is defined and container.dport is not none %} {{ container.dport }}
{% else %}{{ dport |default(none) }}{%- endif +%}
    jobs:
      - '{{ get_prefix(container) }}{{ container.name }}-{tag}-trivy'

{% endfor %}
{% endfor %}
- builder:
    name: {{ get_main_prefix() }}grype
    builders:
      - shell: |
{% for key, value in (docker_args.env |default({})).items() | list %}
{% if "proxy" in (key | lower) %}
          export {{ key }}={{ value }}
{% endif %}
{% endfor %}
          {{ install_grype_deps | indent( width=10, first=false) }}
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | {{ sudo1 }}sh -s -- -b .
          if [ "{repo}" = "_" ]; then
            image={container}:{tag}
          elif [ "{port}" = "None" ]; then
            image={repo}/{container}:{tag}
          else
            image={repo}:{port}/{container}:{tag}
          fi
          ./grype -q $image

{% for step in builds.steps %}
{% for container in step.containers %}
- job-template:
    name: '{{ get_prefix(container) }}{{ container.name }}-{tag}-grype'
{% if triggers %}
    triggers:
{% for trigger in triggers %}
{% for key, value in trigger.items() | list %}
      - {{ key }}: '{{ value}}'
{% endfor %}
{% endfor %}
{% endif %}
{% if use_node %}
    parameters:
      - {{ get_main_prefix() }}node:
          node: '{node}'
{% endif %}
    builders:
      - {{ get_main_prefix() }}grype:
          <<: *{{ get_main_prefix() }}containers
{% if jenkins_publishers %}
    publishers:
      {{ jenkins_publishers | to_nice_yaml(indent=2) | indent(width=6) | trim }}
{% endif %}
{% if jenkins_wrappers %}
    wrappers:
      {{ jenkins_wrappers | to_nice_yaml(indent=2) | indent(width=6) | trim }}
{% endif %}

- project:
    name: '{{ get_prefix(container) }}{{ container.name }}-grype'
    <<: *{{ get_main_prefix() }}params
    repo: '{{ container.repo | default(repo)}}'
    container: '{{ container.name }}'
    port:{% if container.dport is defined and container.dport is not none %} {{ container.dport }}
{% else %}{{ dport |default(none) }}{%- endif +%}
    jobs:
      - '{{ get_prefix(container) }}{{ container.name }}-{tag}-grype'

{% endfor %}
{% endfor %}
{% if not use_podman %}
- builder:
    name: {{ get_main_prefix() }}sbom
    builders:
      - shell: |
{% for key, value in (docker_args.env |default({})).items() | list %}
{% if "proxy" in (key | lower) %}
          export {{ key }}={{ value }}
{% endif %}
{% endfor %}
          {{ install_sbom_deps | indent( width=10, first=false) }}
          {{ sudo1 }}mkdir -p ~/.docker
          curl -sSfL https://raw.githubusercontent.com/docker/sbom-cli-plugin/main/install.sh | {{ sudo1 }}sh -s --
          if [ "{repo}" = "_" ]; then
            image={container}:{tag}
          elif [ "{port}" = "None" ]; then
            image={repo}/{container}:{tag}
          else
            image={repo}:{port}/{container}:{tag}
          fi
          {{ sudo1 }}docker sbom $image

{% for step in builds.steps %}
{% for container in step.containers %}
- job-template:
    name: '{{ get_prefix(container) }}{{ container.name }}-{tag}-sbom'
{% if triggers %}
    triggers:
{% for trigger in triggers %}
{% for key, value in trigger.items() | list %}
      - {{ key }}: '{{ value}}'
{% endfor %}
{% endfor %}
{% endif %}
{% if use_node %}
    parameters:
      - {{ get_main_prefix() }}node:
          node: '{node}'
{% endif %}
    builders:
      - {{ get_main_prefix() }}sbom:
          <<: *{{ get_main_prefix() }}containers
{% if jenkins_publishers %}
    publishers:
      {{ jenkins_publishers | to_nice_yaml(indent=2) | indent(width=6) | trim }}
{% endif %}
{% if jenkins_wrappers %}
    wrappers:
      {{ jenkins_wrappers | to_nice_yaml(indent=2) | indent(width=6) | trim }}
{% endif %}

- project:
    name: '{{ get_prefix(container) }}{{ container.name }}-sbom'
    <<: *{{ get_main_prefix() }}params
    repo: '{{ container.repo | default(repo) }}'
    container: '{{ container.name }}'
    port:{% if container.dport is defined and container.dport is not none %} {{ container.dport }}
{% else %}{{ dport |default(none) }}{%- endif +%}
    jobs:
      - '{{ get_prefix(container) }}{{ container.name }}-{tag}-sbom'

{% endfor %}
{% endfor %}
{% endif %}
- view:
    name: {{ project + '-' + jenkins_extra_prefix }}docker
    view-type: list
    columns:
      - status
      - weather
      - job
      - last-success
      - last-failure
      - last-duration
    regex: {{ jenkins_view_docker_regex }}

- view:
    name: {{ project + '-' + jenkins_extra_prefix }}trivy
    view-type: list
    columns:
      - status
      - weather
      - job
      - last-success
      - last-failure
      - last-duration
    regex: {{ jenkins_view_trivy_regex }}

- view:
    name: {{ project + '-' + jenkins_extra_prefix }}grype
    view-type: list
    columns:
      - status
      - weather
      - job
      - last-success
      - last-failure
      - last-duration
    regex: {{ jenkins_view_grype_regex }}

- view:
    name: {{ project + '-' + jenkins_extra_prefix }}sbom
    view-type: list
    columns:
      - status
      - weather
      - job
      - last-success
      - last-failure
      - last-duration
    regex: {{ jenkins_view_sbom_regex }}
{% endif %}
